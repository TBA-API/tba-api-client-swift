//
// EventInsights2017.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** Insights for FIRST STEAMWORKS qualification and elimination matches. */
public class EventInsights2017: JSONEncodable {
    /** Average foul score. */
    public var averageFoulScore: Float?
    /** Average fuel points scored. */
    public var averageFuelPoints: Float?
    /** Average fuel points scored during auto. */
    public var averageFuelPointsAuto: Float?
    /** Average fuel points scored during teleop. */
    public var averageFuelPointsTeleop: Float?
    /** Average points scored in the high goal. */
    public var averageHighGoals: Float?
    /** Average points scored in the high goal during auto. */
    public var averageHighGoalsAuto: Float?
    /** Average points scored in the high goal during teleop. */
    public var averageHighGoalsTeleop: Float?
    /** Average points scored in the low goal. */
    public var averageLowGoals: Float?
    /** Average points scored in the low goal during auto. */
    public var averageLowGoalsAuto: Float?
    /** Average points scored in the low goal during teleop. */
    public var averageLowGoalsTeleop: Float?
    /** Average mobility points scored during auto. */
    public var averageMobilityPointsAuto: Float?
    /** Average points scored during auto. */
    public var averagePointsAuto: Float?
    /** Average points scored during teleop. */
    public var averagePointsTeleop: Float?
    /** Average rotor points scored. */
    public var averageRotorPoints: Float?
    /** Average rotor points scored during auto. */
    public var averageRotorPointsAuto: Float?
    /** Average rotor points scored during teleop. */
    public var averageRotorPointsTeleop: Float?
    /** Average score. */
    public var averageScore: Float?
    /** Average takeoff points scored during teleop. */
    public var averageTakeoffPointsTeleop: Float?
    /** Average margin of victory. */
    public var averageWinMargin: Float?
    /** Average winning score. */
    public var averageWinScore: Float?
    /** An array with three values, kPa scored, match key from the match with the high kPa, and the name of the match */
    public var highKpa: [String]?
    /** An array with three values, high score, match key from the match with the high score, and the name of the match */
    public var highScore: [String]?
    /** An array with three values, number of times kPa bonus achieved, number of opportunities to bonus, and percentage. */
    public var kpaAchieved: [Float]?
    /** An array with three values, number of times mobility bonus achieved, number of opportunities to bonus, and percentage. */
    public var mobilityCounts: [Float]?
    /** An array with three values, number of times rotor 1 engaged, number of opportunities to engage, and percentage. */
    public var rotor1Engaged: [Float]?
    /** An array with three values, number of times rotor 1 engaged in auto, number of opportunities to engage in auto, and percentage. */
    public var rotor1EngagedAuto: [Float]?
    /** An array with three values, number of times rotor 2 engaged, number of opportunities to engage, and percentage. */
    public var rotor2Engaged: [Float]?
    /** An array with three values, number of times rotor 2 engaged in auto, number of opportunities to engage in auto, and percentage. */
    public var rotor2EngagedAuto: [Float]?
    /** An array with three values, number of times rotor 3 engaged, number of opportunities to engage, and percentage. */
    public var rotor3Engaged: [Float]?
    /** An array with three values, number of times rotor 4 engaged, number of opportunities to engage, and percentage. */
    public var rotor4Engaged: [Float]?
    /** An array with three values, number of times takeoff was counted, number of opportunities to takeoff, and percentage. */
    public var takeoffCounts: [Float]?
    /** An array with three values, number of times a unicorn match (Win + kPa &amp; Rotor Bonuses) occured, number of opportunities to have a unicorn match, and percentage. */
    public var unicornMatches: [Float]?

    public init() {}

    // MARK: JSONEncodable
    func encodeToJSON() -> AnyObject {
        var nillableDictionary = [String:AnyObject?]()
        nillableDictionary["average_foul_score"] = self.averageFoulScore
        nillableDictionary["average_fuel_points"] = self.averageFuelPoints
        nillableDictionary["average_fuel_points_auto"] = self.averageFuelPointsAuto
        nillableDictionary["average_fuel_points_teleop"] = self.averageFuelPointsTeleop
        nillableDictionary["average_high_goals"] = self.averageHighGoals
        nillableDictionary["average_high_goals_auto"] = self.averageHighGoalsAuto
        nillableDictionary["average_high_goals_teleop"] = self.averageHighGoalsTeleop
        nillableDictionary["average_low_goals"] = self.averageLowGoals
        nillableDictionary["average_low_goals_auto"] = self.averageLowGoalsAuto
        nillableDictionary["average_low_goals_teleop"] = self.averageLowGoalsTeleop
        nillableDictionary["average_mobility_points_auto"] = self.averageMobilityPointsAuto
        nillableDictionary["average_points_auto"] = self.averagePointsAuto
        nillableDictionary["average_points_teleop"] = self.averagePointsTeleop
        nillableDictionary["average_rotor_points"] = self.averageRotorPoints
        nillableDictionary["average_rotor_points_auto"] = self.averageRotorPointsAuto
        nillableDictionary["average_rotor_points_teleop"] = self.averageRotorPointsTeleop
        nillableDictionary["average_score"] = self.averageScore
        nillableDictionary["average_takeoff_points_teleop"] = self.averageTakeoffPointsTeleop
        nillableDictionary["average_win_margin"] = self.averageWinMargin
        nillableDictionary["average_win_score"] = self.averageWinScore
        nillableDictionary["high_kpa"] = self.highKpa?.encodeToJSON()
        nillableDictionary["high_score"] = self.highScore?.encodeToJSON()
        nillableDictionary["kpa_achieved"] = self.kpaAchieved?.encodeToJSON()
        nillableDictionary["mobility_counts"] = self.mobilityCounts?.encodeToJSON()
        nillableDictionary["rotor_1_engaged"] = self.rotor1Engaged?.encodeToJSON()
        nillableDictionary["rotor_1_engaged_auto"] = self.rotor1EngagedAuto?.encodeToJSON()
        nillableDictionary["rotor_2_engaged"] = self.rotor2Engaged?.encodeToJSON()
        nillableDictionary["rotor_2_engaged_auto"] = self.rotor2EngagedAuto?.encodeToJSON()
        nillableDictionary["rotor_3_engaged"] = self.rotor3Engaged?.encodeToJSON()
        nillableDictionary["rotor_4_engaged"] = self.rotor4Engaged?.encodeToJSON()
        nillableDictionary["takeoff_counts"] = self.takeoffCounts?.encodeToJSON()
        nillableDictionary["unicorn_matches"] = self.unicornMatches?.encodeToJSON()
        let dictionary: [String:AnyObject] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
