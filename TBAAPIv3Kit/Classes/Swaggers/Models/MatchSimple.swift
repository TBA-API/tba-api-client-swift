//
// MatchSimple.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


open class MatchSimple: JSONEncodable {

    public enum CompLevel: String { 
        case qm = "qm"
        case ef = "ef"
        case qf = "qf"
        case sf = "sf"
        case f = "f"
    }
    public enum WinningAlliance: String { 
        case red = "red"
        case blue = "blue"
    }
    /** TBA match key with the format &#x60;yyyy[EVENT_CODE]_[COMP_LEVEL]m[MATCH_NUMBER]&#x60;, where &#x60;yyyy&#x60; is the year, and &#x60;EVENT_CODE&#x60; is the event code of the event, &#x60;COMP_LEVEL&#x60; is (qm, ef, qf, sf, f), and &#x60;MATCH_NUMBER&#x60; is the match number in the competition level. A set number may append the competition level if more than one match in required per set. */
    public var key: String?
    /** The competition level the match was played at. */
    public var compLevel: CompLevel?
    /** The set number in a series of matches where more than one match is required in the match series. */
    public var setNumber: Int32?
    /** The match number of the match in the competition level. */
    public var matchNumber: Int32?
    public var alliances: MatchSimpleAlliances?
    /** The color (red/blue) of the winning alliance. Will contain an empty string in the event of no winner, or a tie. */
    public var winningAlliance: WinningAlliance?
    /** Event key of the event the match was played at. */
    public var eventKey: String?
    /** UNIX timestamp (seconds since 1-Jan-1970 00:00:00) of the scheduled match time, as taken from the published schedule. */
    public var time: Int64?
    /** UNIX timestamp (seconds since 1-Jan-1970 00:00:00) of the TBA predicted match start time. */
    public var predictedTime: Int64?
    /** UNIX timestamp (seconds since 1-Jan-1970 00:00:00) of actual match start time. */
    public var actualTime: Int64?

    public init() {}

    // MARK: JSONEncodable
    open func encodeToJSON() -> Any {
        var nillableDictionary = [String:Any?]()
        nillableDictionary["key"] = self.key
        nillableDictionary["comp_level"] = self.compLevel?.rawValue
        nillableDictionary["set_number"] = self.setNumber?.encodeToJSON()
        nillableDictionary["match_number"] = self.matchNumber?.encodeToJSON()
        nillableDictionary["alliances"] = self.alliances?.encodeToJSON()
        nillableDictionary["winning_alliance"] = self.winningAlliance?.rawValue
        nillableDictionary["event_key"] = self.eventKey
        nillableDictionary["time"] = self.time?.encodeToJSON()
        nillableDictionary["predicted_time"] = self.predictedTime?.encodeToJSON()
        nillableDictionary["actual_time"] = self.actualTime?.encodeToJSON()

        let dictionary: [String:Any] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}

