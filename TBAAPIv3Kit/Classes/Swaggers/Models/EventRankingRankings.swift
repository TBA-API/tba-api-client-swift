//
// EventRankingRankings.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class EventRankingRankings: Codable {

    /** Number of times disqualified. */
    public var dq: Int
    /** Number of matches played by this team. */
    public var matchesPlayed: Int
    /** The average match score during qualifications. Year specific. May be null if not relevant for a given year. */
    public var qualAverage: Int?
    /** The team&#39;s rank at the event as provided by FIRST. */
    public var rank: Int
    public var record: WLTRecord
    /** Additional special data on the team&#39;s performance calculated by TBA. */
    public var extraStats: [Double]?
    /** Additional year-specific information, may be null. See parent &#x60;sort_order_info&#x60; for details. */
    public var sortOrders: [Double]?
    /** The team with this rank. */
    public var teamKey: String


    
    public init(dq: Int, matchesPlayed: Int, qualAverage: Int?, rank: Int, record: WLTRecord, extraStats: [Double]?, sortOrders: [Double]?, teamKey: String) {
        self.dq = dq
        self.matchesPlayed = matchesPlayed
        self.qualAverage = qualAverage
        self.rank = rank
        self.record = record
        self.extraStats = extraStats
        self.sortOrders = sortOrders
        self.teamKey = teamKey
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encode(dq, forKey: "dq")
        try container.encode(matchesPlayed, forKey: "matches_played")
        try container.encodeIfPresent(qualAverage, forKey: "qual_average")
        try container.encode(rank, forKey: "rank")
        try container.encode(record, forKey: "record")
        try container.encodeIfPresent(extraStats, forKey: "extra_stats")
        try container.encodeIfPresent(sortOrders, forKey: "sort_orders")
        try container.encode(teamKey, forKey: "team_key")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        dq = try container.decode(Int.self, forKey: "dq")
        matchesPlayed = try container.decode(Int.self, forKey: "matches_played")
        qualAverage = try container.decodeIfPresent(Int.self, forKey: "qual_average")
        rank = try container.decode(Int.self, forKey: "rank")
        record = try container.decode(WLTRecord.self, forKey: "record")
        extraStats = try container.decodeIfPresent([Double].self, forKey: "extra_stats")
        sortOrders = try container.decodeIfPresent([Double].self, forKey: "sort_orders")
        teamKey = try container.decode(String.self, forKey: "team_key")
    }
}

