//
// Team.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


public class Team: JSONEncodable {
    /** TBA team key with the format &#x60;frcXXXX&#x60; with &#x60;XXXX&#x60; representing the team number. */
    public var key: String
    /** Official team number issued by FIRST. */
    public var teamNumber: Int32
    /** Team nickname provided by FIRST. */
    public var nickname: String?
    /** Official long name registered with FIRST. */
    public var name: String
    /** City of team derived from parsing the address registered with FIRST. */
    public var city: String?
    /** State of team derived from parsing the address registered with FIRST. */
    public var stateProv: String?
    /** Country of team derived from parsing the address registered with FIRST. */
    public var country: String?
    /** Will be NULL, for future development. */
    public var address: String?
    /** Postal code from the team address. */
    public var postalCode: String?
    /** Will be NULL, for future development. */
    public var gmapsPlaceId: String?
    /** Will be NULL, for future development. */
    public var gmapsUrl: String?
    /** Will be NULL, for future development. */
    public var lat: Double?
    /** Will be NULL, for future development. */
    public var lng: Double?
    /** Will be NULL, for future development. */
    public var locationName: String?
    /** Official website associated with the team. */
    public var website: String?
    /** First year the team officially competed. */
    public var rookieYear: Int32
    /** Team&#39;s motto as provided by FIRST. */
    public var motto: String?
    /** Location of the team&#39;s home championship each year as a key-value pair. The year (as a string) is the key, and the city is the value. */
    public var homeChampionship: AnyObject?

    public init(key: String, teamNumber: Int32, nickname: String?=nil, name: String, city: String?=nil, stateProv: String?=nil, country: String?=nil, address: String?=nil, postalCode: String?=nil, gmapsPlaceId: String?=nil, gmapsUrl: String?=nil, lat: Double?=nil, lng: Double?=nil, locationName: String?=nil, website: String?=nil, rookieYear: Int32, motto: String?=nil, homeChampionship: AnyObject?=nil) {
        self.key = key
        self.teamNumber = teamNumber
        self.nickname = nickname
        self.name = name
        self.city = city
        self.stateProv = stateProv
        self.country = country
        self.address = address
        self.postalCode = postalCode
        self.gmapsPlaceId = gmapsPlaceId
        self.gmapsUrl = gmapsUrl
        self.lat = lat
        self.lng = lng
        self.locationName = locationName
        self.website = website
        self.rookieYear = rookieYear
        self.motto = motto
        self.homeChampionship = homeChampionship
    }

    // MARK: JSONEncodable
    func encodeToJSON() -> AnyObject {
        var nillableDictionary = [String:AnyObject?]()
        nillableDictionary["key"] = self.key
        nillableDictionary["team_number"] = self.teamNumber.encodeToJSON()
        nillableDictionary["nickname"] = self.nickname
        nillableDictionary["name"] = self.name
        nillableDictionary["city"] = self.city
        nillableDictionary["state_prov"] = self.stateProv
        nillableDictionary["country"] = self.country
        nillableDictionary["address"] = self.address
        nillableDictionary["postal_code"] = self.postalCode
        nillableDictionary["gmaps_place_id"] = self.gmapsPlaceId
        nillableDictionary["gmaps_url"] = self.gmapsUrl
        nillableDictionary["lat"] = self.lat
        nillableDictionary["lng"] = self.lng
        nillableDictionary["location_name"] = self.locationName
        nillableDictionary["website"] = self.website
        nillableDictionary["rookie_year"] = self.rookieYear.encodeToJSON()
        nillableDictionary["motto"] = self.motto
        nillableDictionary["home_championship"] = self.homeChampionship
        let dictionary: [String:AnyObject] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
