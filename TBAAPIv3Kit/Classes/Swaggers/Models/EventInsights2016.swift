//
// EventInsights2016.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** Insights for FIRST Stronghold qualification and elimination matches. */

open class EventInsights2016: Codable {

    /** For the Low Bar - An array with three values, number of times damaged, number of opportunities to damage, and percentage. */
    public var lowBar: [Float]
    /** For the Cheval De Frise - An array with three values, number of times damaged, number of opportunities to damage, and percentage. */
    public var aChevalDeFrise: [Float]
    /** For the Portcullis - An array with three values, number of times damaged, number of opportunities to damage, and percentage. */
    public var aPortcullis: [Float]
    /** For the Ramparts - An array with three values, number of times damaged, number of opportunities to damage, and percentage. */
    public var bRamparts: [Float]
    /** For the Moat - An array with three values, number of times damaged, number of opportunities to damage, and percentage. */
    public var bMoat: [Float]
    /** For the Sally Port - An array with three values, number of times damaged, number of opportunities to damage, and percentage. */
    public var cSallyPort: [Float]
    /** For the Drawbridge - An array with three values, number of times damaged, number of opportunities to damage, and percentage. */
    public var cDrawbridge: [Float]
    /** For the Rough Terrain - An array with three values, number of times damaged, number of opportunities to damage, and percentage. */
    public var dRoughTerrain: [Float]
    /** For the Rock Wall - An array with three values, number of times damaged, number of opportunities to damage, and percentage. */
    public var dRockWall: [Float]
    /** Average number of high goals scored. */
    public var averageHighGoals: Float
    /** Average number of low goals scored. */
    public var averageLowGoals: Float
    /** An array with three values, number of times breached, number of opportunities to breach, and percentage. */
    public var breaches: [Float]
    /** An array with three values, number of times scaled, number of opportunities to scale, and percentage. */
    public var scales: [Float]
    /** An array with three values, number of times challenged, number of opportunities to challenge, and percentage. */
    public var challenges: [Float]
    /** An array with three values, number of times captured, number of opportunities to capture, and percentage. */
    public var captures: [Float]
    /** Average winning score. */
    public var averageWinScore: Float
    /** Average margin of victory. */
    public var averageWinMargin: Float
    /** Average total score. */
    public var averageScore: Float
    /** Average autonomous score. */
    public var averageAutoScore: Float
    /** Average crossing score. */
    public var averageCrossingScore: Float
    /** Average boulder score. */
    public var averageBoulderScore: Float
    /** Average tower score. */
    public var averageTowerScore: Float
    /** Average foul score. */
    public var averageFoulScore: Float
    /** An array with three values, high score, match key from the match with the high score, and the name of the match. */
    public var highScore: [String]


    
    public init(lowBar: [Float], aChevalDeFrise: [Float], aPortcullis: [Float], bRamparts: [Float], bMoat: [Float], cSallyPort: [Float], cDrawbridge: [Float], dRoughTerrain: [Float], dRockWall: [Float], averageHighGoals: Float, averageLowGoals: Float, breaches: [Float], scales: [Float], challenges: [Float], captures: [Float], averageWinScore: Float, averageWinMargin: Float, averageScore: Float, averageAutoScore: Float, averageCrossingScore: Float, averageBoulderScore: Float, averageTowerScore: Float, averageFoulScore: Float, highScore: [String]) {
        self.lowBar = lowBar
        self.aChevalDeFrise = aChevalDeFrise
        self.aPortcullis = aPortcullis
        self.bRamparts = bRamparts
        self.bMoat = bMoat
        self.cSallyPort = cSallyPort
        self.cDrawbridge = cDrawbridge
        self.dRoughTerrain = dRoughTerrain
        self.dRockWall = dRockWall
        self.averageHighGoals = averageHighGoals
        self.averageLowGoals = averageLowGoals
        self.breaches = breaches
        self.scales = scales
        self.challenges = challenges
        self.captures = captures
        self.averageWinScore = averageWinScore
        self.averageWinMargin = averageWinMargin
        self.averageScore = averageScore
        self.averageAutoScore = averageAutoScore
        self.averageCrossingScore = averageCrossingScore
        self.averageBoulderScore = averageBoulderScore
        self.averageTowerScore = averageTowerScore
        self.averageFoulScore = averageFoulScore
        self.highScore = highScore
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encode(lowBar, forKey: "LowBar")
        try container.encode(aChevalDeFrise, forKey: "A_ChevalDeFrise")
        try container.encode(aPortcullis, forKey: "A_Portcullis")
        try container.encode(bRamparts, forKey: "B_Ramparts")
        try container.encode(bMoat, forKey: "B_Moat")
        try container.encode(cSallyPort, forKey: "C_SallyPort")
        try container.encode(cDrawbridge, forKey: "C_Drawbridge")
        try container.encode(dRoughTerrain, forKey: "D_RoughTerrain")
        try container.encode(dRockWall, forKey: "D_RockWall")
        try container.encode(averageHighGoals, forKey: "average_high_goals")
        try container.encode(averageLowGoals, forKey: "average_low_goals")
        try container.encode(breaches, forKey: "breaches")
        try container.encode(scales, forKey: "scales")
        try container.encode(challenges, forKey: "challenges")
        try container.encode(captures, forKey: "captures")
        try container.encode(averageWinScore, forKey: "average_win_score")
        try container.encode(averageWinMargin, forKey: "average_win_margin")
        try container.encode(averageScore, forKey: "average_score")
        try container.encode(averageAutoScore, forKey: "average_auto_score")
        try container.encode(averageCrossingScore, forKey: "average_crossing_score")
        try container.encode(averageBoulderScore, forKey: "average_boulder_score")
        try container.encode(averageTowerScore, forKey: "average_tower_score")
        try container.encode(averageFoulScore, forKey: "average_foul_score")
        try container.encode(highScore, forKey: "high_score")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        lowBar = try container.decode([Float].self, forKey: "LowBar")
        aChevalDeFrise = try container.decode([Float].self, forKey: "A_ChevalDeFrise")
        aPortcullis = try container.decode([Float].self, forKey: "A_Portcullis")
        bRamparts = try container.decode([Float].self, forKey: "B_Ramparts")
        bMoat = try container.decode([Float].self, forKey: "B_Moat")
        cSallyPort = try container.decode([Float].self, forKey: "C_SallyPort")
        cDrawbridge = try container.decode([Float].self, forKey: "C_Drawbridge")
        dRoughTerrain = try container.decode([Float].self, forKey: "D_RoughTerrain")
        dRockWall = try container.decode([Float].self, forKey: "D_RockWall")
        averageHighGoals = try container.decode(Float.self, forKey: "average_high_goals")
        averageLowGoals = try container.decode(Float.self, forKey: "average_low_goals")
        breaches = try container.decode([Float].self, forKey: "breaches")
        scales = try container.decode([Float].self, forKey: "scales")
        challenges = try container.decode([Float].self, forKey: "challenges")
        captures = try container.decode([Float].self, forKey: "captures")
        averageWinScore = try container.decode(Float.self, forKey: "average_win_score")
        averageWinMargin = try container.decode(Float.self, forKey: "average_win_margin")
        averageScore = try container.decode(Float.self, forKey: "average_score")
        averageAutoScore = try container.decode(Float.self, forKey: "average_auto_score")
        averageCrossingScore = try container.decode(Float.self, forKey: "average_crossing_score")
        averageBoulderScore = try container.decode(Float.self, forKey: "average_boulder_score")
        averageTowerScore = try container.decode(Float.self, forKey: "average_tower_score")
        averageFoulScore = try container.decode(Float.self, forKey: "average_foul_score")
        highScore = try container.decode([String].self, forKey: "high_score")
    }
}

