//
// TeamEventStatus.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class TeamEventStatus: Codable {

    public var qual: TeamEventStatusRank?
    public var alliance: TeamEventStatusAlliance?
    public var playoff: TeamEventStatusPlayoff?
    /** An HTML formatted string suitable for display to the user containing the team&#39;s alliance pick status. */
    public var allianceStatusStr: String?
    /** An HTML formatter string suitable for display to the user containing the team&#39;s playoff status. */
    public var playoffStatusStr: String?
    /** An HTML formatted string suitable for display to the user containing the team&#39;s overall status summary of the event. */
    public var overallStatusStr: String?
    /** TBA match key for the next match the team is scheduled to play in at this event, or null. */
    public var nextMatchKey: String?
    /** TBA match key for the last match the team played in at this event, or null. */
    public var lastMatchKey: String?


    
    public init(qual: TeamEventStatusRank?, alliance: TeamEventStatusAlliance?, playoff: TeamEventStatusPlayoff?, allianceStatusStr: String?, playoffStatusStr: String?, overallStatusStr: String?, nextMatchKey: String?, lastMatchKey: String?) {
        self.qual = qual
        self.alliance = alliance
        self.playoff = playoff
        self.allianceStatusStr = allianceStatusStr
        self.playoffStatusStr = playoffStatusStr
        self.overallStatusStr = overallStatusStr
        self.nextMatchKey = nextMatchKey
        self.lastMatchKey = lastMatchKey
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(qual, forKey: "qual")
        try container.encodeIfPresent(alliance, forKey: "alliance")
        try container.encodeIfPresent(playoff, forKey: "playoff")
        try container.encodeIfPresent(allianceStatusStr, forKey: "alliance_status_str")
        try container.encodeIfPresent(playoffStatusStr, forKey: "playoff_status_str")
        try container.encodeIfPresent(overallStatusStr, forKey: "overall_status_str")
        try container.encodeIfPresent(nextMatchKey, forKey: "next_match_key")
        try container.encodeIfPresent(lastMatchKey, forKey: "last_match_key")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        qual = try container.decodeIfPresent(TeamEventStatusRank.self, forKey: "qual")
        alliance = try container.decodeIfPresent(TeamEventStatusAlliance.self, forKey: "alliance")
        playoff = try container.decodeIfPresent(TeamEventStatusPlayoff.self, forKey: "playoff")
        allianceStatusStr = try container.decodeIfPresent(String.self, forKey: "alliance_status_str")
        playoffStatusStr = try container.decodeIfPresent(String.self, forKey: "playoff_status_str")
        overallStatusStr = try container.decodeIfPresent(String.self, forKey: "overall_status_str")
        nextMatchKey = try container.decodeIfPresent(String.self, forKey: "next_match_key")
        lastMatchKey = try container.decodeIfPresent(String.self, forKey: "last_match_key")
    }
}

