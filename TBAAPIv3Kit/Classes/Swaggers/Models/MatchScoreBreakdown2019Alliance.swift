//
// MatchScoreBreakdown2019Alliance.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class MatchScoreBreakdown2019Alliance: Codable {

    public var adjustPoints: Int?
    public var autoPoints: Int?
    public var bay1: String?
    public var bay2: String?
    public var bay3: String?
    public var bay4: String?
    public var bay5: String?
    public var bay6: String?
    public var bay7: String?
    public var bay8: String?
    public var cargoPoints: Int?
    public var completeRocketRankingPoint: Bool?
    public var completedRocketFar: Bool?
    public var completedRocketNear: Bool?
    public var endgameRobot1: String?
    public var endgameRobot2: String?
    public var endgameRobot3: String?
    public var foulCount: Int?
    public var foulPoints: Int?
    public var habClimbPoints: Int?
    public var habDockingRankingPoint: Bool?
    public var habLineRobot1: String?
    public var habLineRobot2: String?
    public var habLineRobot3: String?
    public var hatchPanelPoints: Int?
    public var lowLeftRocketFar: String?
    public var lowLeftRocketNear: String?
    public var lowRightRocketFar: String?
    public var lowRightRocketNear: String?
    public var midLeftRocketFar: String?
    public var midLeftRocketNear: String?
    public var midRightRocketFar: String?
    public var midRightRocketNear: String?
    public var preMatchBay1: String?
    public var preMatchBay2: String?
    public var preMatchBay3: String?
    public var preMatchBay6: String?
    public var preMatchBay7: String?
    public var preMatchBay8: String?
    public var preMatchLevelRobot1: String?
    public var preMatchLevelRobot2: String?
    public var preMatchLevelRobot3: String?
    public var rp: Int?
    public var sandStormBonusPoints: Int?
    public var techFoulCount: Int?
    public var teleopPoints: Int?
    public var topLeftRocketFar: String?
    public var topLeftRocketNear: String?
    public var topRightRocketFar: String?
    public var topRightRocketNear: String?
    public var totalPoints: Int?


    
    public init(adjustPoints: Int?, autoPoints: Int?, bay1: String?, bay2: String?, bay3: String?, bay4: String?, bay5: String?, bay6: String?, bay7: String?, bay8: String?, cargoPoints: Int?, completeRocketRankingPoint: Bool?, completedRocketFar: Bool?, completedRocketNear: Bool?, endgameRobot1: String?, endgameRobot2: String?, endgameRobot3: String?, foulCount: Int?, foulPoints: Int?, habClimbPoints: Int?, habDockingRankingPoint: Bool?, habLineRobot1: String?, habLineRobot2: String?, habLineRobot3: String?, hatchPanelPoints: Int?, lowLeftRocketFar: String?, lowLeftRocketNear: String?, lowRightRocketFar: String?, lowRightRocketNear: String?, midLeftRocketFar: String?, midLeftRocketNear: String?, midRightRocketFar: String?, midRightRocketNear: String?, preMatchBay1: String?, preMatchBay2: String?, preMatchBay3: String?, preMatchBay6: String?, preMatchBay7: String?, preMatchBay8: String?, preMatchLevelRobot1: String?, preMatchLevelRobot2: String?, preMatchLevelRobot3: String?, rp: Int?, sandStormBonusPoints: Int?, techFoulCount: Int?, teleopPoints: Int?, topLeftRocketFar: String?, topLeftRocketNear: String?, topRightRocketFar: String?, topRightRocketNear: String?, totalPoints: Int?) {
        self.adjustPoints = adjustPoints
        self.autoPoints = autoPoints
        self.bay1 = bay1
        self.bay2 = bay2
        self.bay3 = bay3
        self.bay4 = bay4
        self.bay5 = bay5
        self.bay6 = bay6
        self.bay7 = bay7
        self.bay8 = bay8
        self.cargoPoints = cargoPoints
        self.completeRocketRankingPoint = completeRocketRankingPoint
        self.completedRocketFar = completedRocketFar
        self.completedRocketNear = completedRocketNear
        self.endgameRobot1 = endgameRobot1
        self.endgameRobot2 = endgameRobot2
        self.endgameRobot3 = endgameRobot3
        self.foulCount = foulCount
        self.foulPoints = foulPoints
        self.habClimbPoints = habClimbPoints
        self.habDockingRankingPoint = habDockingRankingPoint
        self.habLineRobot1 = habLineRobot1
        self.habLineRobot2 = habLineRobot2
        self.habLineRobot3 = habLineRobot3
        self.hatchPanelPoints = hatchPanelPoints
        self.lowLeftRocketFar = lowLeftRocketFar
        self.lowLeftRocketNear = lowLeftRocketNear
        self.lowRightRocketFar = lowRightRocketFar
        self.lowRightRocketNear = lowRightRocketNear
        self.midLeftRocketFar = midLeftRocketFar
        self.midLeftRocketNear = midLeftRocketNear
        self.midRightRocketFar = midRightRocketFar
        self.midRightRocketNear = midRightRocketNear
        self.preMatchBay1 = preMatchBay1
        self.preMatchBay2 = preMatchBay2
        self.preMatchBay3 = preMatchBay3
        self.preMatchBay6 = preMatchBay6
        self.preMatchBay7 = preMatchBay7
        self.preMatchBay8 = preMatchBay8
        self.preMatchLevelRobot1 = preMatchLevelRobot1
        self.preMatchLevelRobot2 = preMatchLevelRobot2
        self.preMatchLevelRobot3 = preMatchLevelRobot3
        self.rp = rp
        self.sandStormBonusPoints = sandStormBonusPoints
        self.techFoulCount = techFoulCount
        self.teleopPoints = teleopPoints
        self.topLeftRocketFar = topLeftRocketFar
        self.topLeftRocketNear = topLeftRocketNear
        self.topRightRocketFar = topRightRocketFar
        self.topRightRocketNear = topRightRocketNear
        self.totalPoints = totalPoints
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(adjustPoints, forKey: "adjustPoints")
        try container.encodeIfPresent(autoPoints, forKey: "autoPoints")
        try container.encodeIfPresent(bay1, forKey: "bay1")
        try container.encodeIfPresent(bay2, forKey: "bay2")
        try container.encodeIfPresent(bay3, forKey: "bay3")
        try container.encodeIfPresent(bay4, forKey: "bay4")
        try container.encodeIfPresent(bay5, forKey: "bay5")
        try container.encodeIfPresent(bay6, forKey: "bay6")
        try container.encodeIfPresent(bay7, forKey: "bay7")
        try container.encodeIfPresent(bay8, forKey: "bay8")
        try container.encodeIfPresent(cargoPoints, forKey: "cargoPoints")
        try container.encodeIfPresent(completeRocketRankingPoint, forKey: "completeRocketRankingPoint")
        try container.encodeIfPresent(completedRocketFar, forKey: "completedRocketFar")
        try container.encodeIfPresent(completedRocketNear, forKey: "completedRocketNear")
        try container.encodeIfPresent(endgameRobot1, forKey: "endgameRobot1")
        try container.encodeIfPresent(endgameRobot2, forKey: "endgameRobot2")
        try container.encodeIfPresent(endgameRobot3, forKey: "endgameRobot3")
        try container.encodeIfPresent(foulCount, forKey: "foulCount")
        try container.encodeIfPresent(foulPoints, forKey: "foulPoints")
        try container.encodeIfPresent(habClimbPoints, forKey: "habClimbPoints")
        try container.encodeIfPresent(habDockingRankingPoint, forKey: "habDockingRankingPoint")
        try container.encodeIfPresent(habLineRobot1, forKey: "habLineRobot1")
        try container.encodeIfPresent(habLineRobot2, forKey: "habLineRobot2")
        try container.encodeIfPresent(habLineRobot3, forKey: "habLineRobot3")
        try container.encodeIfPresent(hatchPanelPoints, forKey: "hatchPanelPoints")
        try container.encodeIfPresent(lowLeftRocketFar, forKey: "lowLeftRocketFar")
        try container.encodeIfPresent(lowLeftRocketNear, forKey: "lowLeftRocketNear")
        try container.encodeIfPresent(lowRightRocketFar, forKey: "lowRightRocketFar")
        try container.encodeIfPresent(lowRightRocketNear, forKey: "lowRightRocketNear")
        try container.encodeIfPresent(midLeftRocketFar, forKey: "midLeftRocketFar")
        try container.encodeIfPresent(midLeftRocketNear, forKey: "midLeftRocketNear")
        try container.encodeIfPresent(midRightRocketFar, forKey: "midRightRocketFar")
        try container.encodeIfPresent(midRightRocketNear, forKey: "midRightRocketNear")
        try container.encodeIfPresent(preMatchBay1, forKey: "preMatchBay1")
        try container.encodeIfPresent(preMatchBay2, forKey: "preMatchBay2")
        try container.encodeIfPresent(preMatchBay3, forKey: "preMatchBay3")
        try container.encodeIfPresent(preMatchBay6, forKey: "preMatchBay6")
        try container.encodeIfPresent(preMatchBay7, forKey: "preMatchBay7")
        try container.encodeIfPresent(preMatchBay8, forKey: "preMatchBay8")
        try container.encodeIfPresent(preMatchLevelRobot1, forKey: "preMatchLevelRobot1")
        try container.encodeIfPresent(preMatchLevelRobot2, forKey: "preMatchLevelRobot2")
        try container.encodeIfPresent(preMatchLevelRobot3, forKey: "preMatchLevelRobot3")
        try container.encodeIfPresent(rp, forKey: "rp")
        try container.encodeIfPresent(sandStormBonusPoints, forKey: "sandStormBonusPoints")
        try container.encodeIfPresent(techFoulCount, forKey: "techFoulCount")
        try container.encodeIfPresent(teleopPoints, forKey: "teleopPoints")
        try container.encodeIfPresent(topLeftRocketFar, forKey: "topLeftRocketFar")
        try container.encodeIfPresent(topLeftRocketNear, forKey: "topLeftRocketNear")
        try container.encodeIfPresent(topRightRocketFar, forKey: "topRightRocketFar")
        try container.encodeIfPresent(topRightRocketNear, forKey: "topRightRocketNear")
        try container.encodeIfPresent(totalPoints, forKey: "totalPoints")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        adjustPoints = try container.decodeIfPresent(Int.self, forKey: "adjustPoints")
        autoPoints = try container.decodeIfPresent(Int.self, forKey: "autoPoints")
        bay1 = try container.decodeIfPresent(String.self, forKey: "bay1")
        bay2 = try container.decodeIfPresent(String.self, forKey: "bay2")
        bay3 = try container.decodeIfPresent(String.self, forKey: "bay3")
        bay4 = try container.decodeIfPresent(String.self, forKey: "bay4")
        bay5 = try container.decodeIfPresent(String.self, forKey: "bay5")
        bay6 = try container.decodeIfPresent(String.self, forKey: "bay6")
        bay7 = try container.decodeIfPresent(String.self, forKey: "bay7")
        bay8 = try container.decodeIfPresent(String.self, forKey: "bay8")
        cargoPoints = try container.decodeIfPresent(Int.self, forKey: "cargoPoints")
        completeRocketRankingPoint = try container.decodeIfPresent(Bool.self, forKey: "completeRocketRankingPoint")
        completedRocketFar = try container.decodeIfPresent(Bool.self, forKey: "completedRocketFar")
        completedRocketNear = try container.decodeIfPresent(Bool.self, forKey: "completedRocketNear")
        endgameRobot1 = try container.decodeIfPresent(String.self, forKey: "endgameRobot1")
        endgameRobot2 = try container.decodeIfPresent(String.self, forKey: "endgameRobot2")
        endgameRobot3 = try container.decodeIfPresent(String.self, forKey: "endgameRobot3")
        foulCount = try container.decodeIfPresent(Int.self, forKey: "foulCount")
        foulPoints = try container.decodeIfPresent(Int.self, forKey: "foulPoints")
        habClimbPoints = try container.decodeIfPresent(Int.self, forKey: "habClimbPoints")
        habDockingRankingPoint = try container.decodeIfPresent(Bool.self, forKey: "habDockingRankingPoint")
        habLineRobot1 = try container.decodeIfPresent(String.self, forKey: "habLineRobot1")
        habLineRobot2 = try container.decodeIfPresent(String.self, forKey: "habLineRobot2")
        habLineRobot3 = try container.decodeIfPresent(String.self, forKey: "habLineRobot3")
        hatchPanelPoints = try container.decodeIfPresent(Int.self, forKey: "hatchPanelPoints")
        lowLeftRocketFar = try container.decodeIfPresent(String.self, forKey: "lowLeftRocketFar")
        lowLeftRocketNear = try container.decodeIfPresent(String.self, forKey: "lowLeftRocketNear")
        lowRightRocketFar = try container.decodeIfPresent(String.self, forKey: "lowRightRocketFar")
        lowRightRocketNear = try container.decodeIfPresent(String.self, forKey: "lowRightRocketNear")
        midLeftRocketFar = try container.decodeIfPresent(String.self, forKey: "midLeftRocketFar")
        midLeftRocketNear = try container.decodeIfPresent(String.self, forKey: "midLeftRocketNear")
        midRightRocketFar = try container.decodeIfPresent(String.self, forKey: "midRightRocketFar")
        midRightRocketNear = try container.decodeIfPresent(String.self, forKey: "midRightRocketNear")
        preMatchBay1 = try container.decodeIfPresent(String.self, forKey: "preMatchBay1")
        preMatchBay2 = try container.decodeIfPresent(String.self, forKey: "preMatchBay2")
        preMatchBay3 = try container.decodeIfPresent(String.self, forKey: "preMatchBay3")
        preMatchBay6 = try container.decodeIfPresent(String.self, forKey: "preMatchBay6")
        preMatchBay7 = try container.decodeIfPresent(String.self, forKey: "preMatchBay7")
        preMatchBay8 = try container.decodeIfPresent(String.self, forKey: "preMatchBay8")
        preMatchLevelRobot1 = try container.decodeIfPresent(String.self, forKey: "preMatchLevelRobot1")
        preMatchLevelRobot2 = try container.decodeIfPresent(String.self, forKey: "preMatchLevelRobot2")
        preMatchLevelRobot3 = try container.decodeIfPresent(String.self, forKey: "preMatchLevelRobot3")
        rp = try container.decodeIfPresent(Int.self, forKey: "rp")
        sandStormBonusPoints = try container.decodeIfPresent(Int.self, forKey: "sandStormBonusPoints")
        techFoulCount = try container.decodeIfPresent(Int.self, forKey: "techFoulCount")
        teleopPoints = try container.decodeIfPresent(Int.self, forKey: "teleopPoints")
        topLeftRocketFar = try container.decodeIfPresent(String.self, forKey: "topLeftRocketFar")
        topLeftRocketNear = try container.decodeIfPresent(String.self, forKey: "topLeftRocketNear")
        topRightRocketFar = try container.decodeIfPresent(String.self, forKey: "topRightRocketFar")
        topRightRocketNear = try container.decodeIfPresent(String.self, forKey: "topRightRocketNear")
        totalPoints = try container.decodeIfPresent(Int.self, forKey: "totalPoints")
    }
}

