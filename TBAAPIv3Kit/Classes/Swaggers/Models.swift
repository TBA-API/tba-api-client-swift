// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> AnyObject
}

public enum ErrorResponse : ErrorType {
    case Error(Int, NSData?, ErrorType)
}

public class Response<T> {
    public let statusCode: Int
    public let header: [String: String]
    public let body: T?

    public init(statusCode: Int, header: [String: String], body: T?) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: NSHTTPURLResponse, body: T?) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for case let (key, value) as (String, String) in rawHeader {
            header[key] = value
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

private var once = dispatch_once_t()
class Decoders {
    static private var decoders = Dictionary<String, ((AnyObject) -> AnyObject)>()

    static func addDecoder<T>(clazz clazz: T.Type, decoder: ((AnyObject) -> T)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0) as! AnyObject }
    }

    static func decode<T>(clazz clazz: [T].Type, source: AnyObject) -> [T] {
        let array = source as! [AnyObject]
        return array.map { Decoders.decode(clazz: T.self, source: $0) }
    }

    static func decode<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject) -> [Key:T] {
        let sourceDictionary = source as! [Key: AnyObject]
        var dictionary = [Key:T]()
        for (key, value) in sourceDictionary {
            dictionary[key] = Decoders.decode(clazz: T.self, source: value)
        }
        return dictionary
    }

    static func decode<T>(clazz clazz: T.Type, source: AnyObject) -> T {
        initialize()
        if T.self is Int32.Type && source is NSNumber {
            return source.intValue as! T;
        }
        if T.self is Int64.Type && source is NSNumber {
            return source.longLongValue as! T;
        }
        if T.self is NSUUID.Type && source is String {
            return NSUUID(UUIDString: source as! String) as! T
        }
        if source is T {
            return source as! T
        }
        if T.self is NSData.Type && source is String {
            return NSData(base64EncodedString: source as! String, options: NSDataBase64DecodingOptions()) as! T
        }

        let key = "\(T.self)"
        if let decoder = decoders[key] {
           return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decodeOptional<T>(clazz clazz: T.Type, source: AnyObject?) -> T? {
        if source is NSNull {
            return nil
        }
        return source.map { (source: AnyObject) -> T in
            Decoders.decode(clazz: clazz, source: source)
        }
    }

    static func decodeOptional<T>(clazz clazz: [T].Type, source: AnyObject?) -> [T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject?) -> [Key:T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [Key:T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static private func initialize() {
        dispatch_once(&once) {
            let formatters = [
                "yyyy-MM-dd",
                "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss'Z'",
                "yyyy-MM-dd'T'HH:mm:ss.SSS"
            ].map { (format: String) -> NSDateFormatter in
                let formatter = NSDateFormatter()
                formatter.locale = NSLocale(localeIdentifier:"en_US_POSIX")
                formatter.dateFormat = format
                return formatter
            }
            // Decoder for NSDate
            Decoders.addDecoder(clazz: NSDate.self) { (source: AnyObject) -> NSDate in
               if let sourceString = source as? String {
                    for formatter in formatters {
                        if let date = formatter.dateFromString(sourceString) {
                            return date
                        }
                    }

                }
                if let sourceInt = source as? Int {
                    // treat as a java date
                    return NSDate(timeIntervalSince1970: Double(sourceInt / 1000) )
                }
                fatalError("formatter failed to parse \(source)")
            }

            // Decoder for ISOFullDate
            Decoders.addDecoder(clazz: ISOFullDate.self, decoder: { (source: AnyObject) -> ISOFullDate in
                if let string = source as? String,
                   let isoDate = ISOFullDate.from(string: string) {
                    return isoDate
                }
                fatalError("formatter failed to parse \(source)")
            }) 

            // Decoder for [APIStatus]
            Decoders.addDecoder(clazz: [APIStatus].self) { (source: AnyObject) -> [APIStatus] in
                return Decoders.decode(clazz: [APIStatus].self, source: source)
            }
            // Decoder for APIStatus
            Decoders.addDecoder(clazz: APIStatus.self) { (source: AnyObject) -> APIStatus in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = APIStatus(currentSeason: Decoders.decode(clazz: Int32.self, source: sourceDictionary["current_season"]!), maxSeason: Decoders.decode(clazz: Int32.self, source: sourceDictionary["max_season"]!), isDatafeedDown: Decoders.decode(clazz: Bool.self, source: sourceDictionary["is_datafeed_down"]!), downEvents: Decoders.decode(clazz: Array.self, source: sourceDictionary["down_events"]!), ios: Decoders.decode(clazz: APIStatusAppVersion.self, source: sourceDictionary["ios"]!), android: Decoders.decode(clazz: APIStatusAppVersion.self, source: sourceDictionary["android"]!))
                return instance
            }


            // Decoder for [APIStatusAppVersion]
            Decoders.addDecoder(clazz: [APIStatusAppVersion].self) { (source: AnyObject) -> [APIStatusAppVersion] in
                return Decoders.decode(clazz: [APIStatusAppVersion].self, source: source)
            }
            // Decoder for APIStatusAppVersion
            Decoders.addDecoder(clazz: APIStatusAppVersion.self) { (source: AnyObject) -> APIStatusAppVersion in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = APIStatusAppVersion(minAppVersion: Decoders.decode(clazz: Int32.self, source: sourceDictionary["min_app_version"]!), latestAppVersion: Decoders.decode(clazz: Int32.self, source: sourceDictionary["latest_app_version"]!))
                return instance
            }


            // Decoder for [Award]
            Decoders.addDecoder(clazz: [Award].self) { (source: AnyObject) -> [Award] in
                return Decoders.decode(clazz: [Award].self, source: source)
            }
            // Decoder for Award
            Decoders.addDecoder(clazz: Award.self) { (source: AnyObject) -> Award in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Award(name: Decoders.decode(clazz: String.self, source: sourceDictionary["name"]!), awardType: Decoders.decode(clazz: Int32.self, source: sourceDictionary["award_type"]!), eventKey: Decoders.decode(clazz: String.self, source: sourceDictionary["event_key"]!), recipientList: Decoders.decode(clazz: Array.self, source: sourceDictionary["recipient_list"]!), year: Decoders.decode(clazz: Int32.self, source: sourceDictionary["year"]!))
                return instance
            }


            // Decoder for [AwardRecipient]
            Decoders.addDecoder(clazz: [AwardRecipient].self) { (source: AnyObject) -> [AwardRecipient] in
                return Decoders.decode(clazz: [AwardRecipient].self, source: source)
            }
            // Decoder for AwardRecipient
            Decoders.addDecoder(clazz: AwardRecipient.self) { (source: AnyObject) -> AwardRecipient in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AwardRecipient()
                instance.teamKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["team_key"])
                instance.awardee = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["awardee"])
                return instance
            }


            // Decoder for [DistrictList]
            Decoders.addDecoder(clazz: [DistrictList].self) { (source: AnyObject) -> [DistrictList] in
                return Decoders.decode(clazz: [DistrictList].self, source: source)
            }
            // Decoder for DistrictList
            Decoders.addDecoder(clazz: DistrictList.self) { (source: AnyObject) -> DistrictList in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DistrictList(abbreviation: Decoders.decode(clazz: String.self, source: sourceDictionary["abbreviation"]!), displayName: Decoders.decode(clazz: String.self, source: sourceDictionary["display_name"]!), key: Decoders.decode(clazz: String.self, source: sourceDictionary["key"]!), year: Decoders.decode(clazz: Int32.self, source: sourceDictionary["year"]!))
                return instance
            }


            // Decoder for [DistrictRanking]
            Decoders.addDecoder(clazz: [DistrictRanking].self) { (source: AnyObject) -> [DistrictRanking] in
                return Decoders.decode(clazz: [DistrictRanking].self, source: source)
            }
            // Decoder for DistrictRanking
            Decoders.addDecoder(clazz: DistrictRanking.self) { (source: AnyObject) -> DistrictRanking in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DistrictRanking(teamKey: Decoders.decode(clazz: String.self, source: sourceDictionary["team_key"]!), rank: Decoders.decode(clazz: Int32.self, source: sourceDictionary["rank"]!), pointTotal: Decoders.decode(clazz: Int32.self, source: sourceDictionary["point_total"]!))
                instance.rookieBonus = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["rookie_bonus"])
                instance.eventPoints = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["event_points"])
                return instance
            }


            // Decoder for [DistrictRankingEventPoints]
            Decoders.addDecoder(clazz: [DistrictRankingEventPoints].self) { (source: AnyObject) -> [DistrictRankingEventPoints] in
                return Decoders.decode(clazz: [DistrictRankingEventPoints].self, source: source)
            }
            // Decoder for DistrictRankingEventPoints
            Decoders.addDecoder(clazz: DistrictRankingEventPoints.self) { (source: AnyObject) -> DistrictRankingEventPoints in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DistrictRankingEventPoints(eventKey: Decoders.decode(clazz: String.self, source: sourceDictionary["event_key"]!), districtCmp: Decoders.decode(clazz: Bool.self, source: sourceDictionary["district_cmp"]!), alliancePoints: Decoders.decode(clazz: Int32.self, source: sourceDictionary["alliance_points"]!), awardPoints: Decoders.decode(clazz: Int32.self, source: sourceDictionary["award_points"]!), qualPoints: Decoders.decode(clazz: Int32.self, source: sourceDictionary["qual_points"]!), elimPoints: Decoders.decode(clazz: Int32.self, source: sourceDictionary["elim_points"]!), total: Decoders.decode(clazz: Int32.self, source: sourceDictionary["total"]!))
                return instance
            }


            // Decoder for [EliminationAlliance]
            Decoders.addDecoder(clazz: [EliminationAlliance].self) { (source: AnyObject) -> [EliminationAlliance] in
                return Decoders.decode(clazz: [EliminationAlliance].self, source: source)
            }
            // Decoder for EliminationAlliance
            Decoders.addDecoder(clazz: EliminationAlliance.self) { (source: AnyObject) -> EliminationAlliance in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = EliminationAlliance(picks: Decoders.decode(clazz: Array.self, source: sourceDictionary["picks"]!))
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.backup = Decoders.decodeOptional(clazz: EliminationAllianceBackup.self, source: sourceDictionary["backup"])
                instance.declines = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["declines"])
                instance.status = Decoders.decodeOptional(clazz: EliminationAllianceStatus.self, source: sourceDictionary["status"])
                return instance
            }


            // Decoder for [EliminationAllianceBackup]
            Decoders.addDecoder(clazz: [EliminationAllianceBackup].self) { (source: AnyObject) -> [EliminationAllianceBackup] in
                return Decoders.decode(clazz: [EliminationAllianceBackup].self, source: source)
            }
            // Decoder for EliminationAllianceBackup
            Decoders.addDecoder(clazz: EliminationAllianceBackup.self) { (source: AnyObject) -> EliminationAllianceBackup in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = EliminationAllianceBackup()
                instance.out = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["out"])
                instance._in = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["in"])
                return instance
            }


            // Decoder for [EliminationAllianceStatus]
            Decoders.addDecoder(clazz: [EliminationAllianceStatus].self) { (source: AnyObject) -> [EliminationAllianceStatus] in
                return Decoders.decode(clazz: [EliminationAllianceStatus].self, source: source)
            }
            // Decoder for EliminationAllianceStatus
            Decoders.addDecoder(clazz: EliminationAllianceStatus.self) { (source: AnyObject) -> EliminationAllianceStatus in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = EliminationAllianceStatus()
                instance.currentLevelRecord = Decoders.decodeOptional(clazz: WLTRecord.self, source: sourceDictionary["current_level_record"])
                instance.level = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["level"])
                instance.playoffAverage = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["playoff_average"])
                instance.record = Decoders.decodeOptional(clazz: WLTRecord.self, source: sourceDictionary["record"])
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"])
                return instance
            }


            // Decoder for [Event]
            Decoders.addDecoder(clazz: [Event].self) { (source: AnyObject) -> [Event] in
                return Decoders.decode(clazz: [Event].self, source: source)
            }
            // Decoder for Event
            Decoders.addDecoder(clazz: Event.self) { (source: AnyObject) -> Event in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Event(key: Decoders.decode(clazz: String.self, source: sourceDictionary["key"]!), name: Decoders.decode(clazz: String.self, source: sourceDictionary["name"]!), eventCode: Decoders.decode(clazz: String.self, source: sourceDictionary["event_code"]!), eventType: Decoders.decode(clazz: Int32.self, source: sourceDictionary["event_type"]!), startDate: Decoders.decode(clazz: ISOFullDate.self, source: sourceDictionary["start_date"]!), endDate: Decoders.decode(clazz: ISOFullDate.self, source: sourceDictionary["end_date"]!), year: Decoders.decode(clazz: Int32.self, source: sourceDictionary["year"]!), eventTypeString: Decoders.decode(clazz: String.self, source: sourceDictionary["event_type_string"]!))
                instance.district = Decoders.decodeOptional(clazz: DistrictList.self, source: sourceDictionary["district"])
                instance.city = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["city"])
                instance.stateProv = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["state_prov"])
                instance.country = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country"])
                instance.shortName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["short_name"])
                instance.week = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["week"])
                instance.address = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["address"])
                instance.postalCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["postal_code"])
                instance.gmapsPlaceId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["gmaps_place_id"])
                instance.gmapsUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["gmaps_url"])
                instance.lat = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lat"])
                instance.lng = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lng"])
                instance.locationName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["location_name"])
                instance.timezone = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["timezone"])
                instance.website = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["website"])
                instance.firstEventId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["first_event_id"])
                instance.firstEventCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["first_event_code"])
                instance.webcasts = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["webcasts"])
                instance.divisionKeys = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["division_keys"])
                instance.parentEventKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["parent_event_key"])
                instance.playoffType = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["playoff_type"])
                instance.playoffTypeString = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["playoff_type_string"])
                return instance
            }


            // Decoder for [EventDistrictPoints]
            Decoders.addDecoder(clazz: [EventDistrictPoints].self) { (source: AnyObject) -> [EventDistrictPoints] in
                return Decoders.decode(clazz: [EventDistrictPoints].self, source: source)
            }
            // Decoder for EventDistrictPoints
            Decoders.addDecoder(clazz: EventDistrictPoints.self) { (source: AnyObject) -> EventDistrictPoints in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = EventDistrictPoints(points: Decoders.decode(clazz: Dictionary.self, source: sourceDictionary["points"]!))
                instance.tiebreakers = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["tiebreakers"])
                return instance
            }


            // Decoder for [EventDistrictPointsPoints]
            Decoders.addDecoder(clazz: [EventDistrictPointsPoints].self) { (source: AnyObject) -> [EventDistrictPointsPoints] in
                return Decoders.decode(clazz: [EventDistrictPointsPoints].self, source: source)
            }
            // Decoder for EventDistrictPointsPoints
            Decoders.addDecoder(clazz: EventDistrictPointsPoints.self) { (source: AnyObject) -> EventDistrictPointsPoints in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = EventDistrictPointsPoints(alliancePoints: Decoders.decode(clazz: Int32.self, source: sourceDictionary["alliance_points"]!), awardPoints: Decoders.decode(clazz: Int32.self, source: sourceDictionary["award_points"]!), qualPoints: Decoders.decode(clazz: Int32.self, source: sourceDictionary["qual_points"]!), elimPoints: Decoders.decode(clazz: Int32.self, source: sourceDictionary["elim_points"]!), total: Decoders.decode(clazz: Int32.self, source: sourceDictionary["total"]!))
                return instance
            }


            // Decoder for [EventDistrictPointsTiebreakers]
            Decoders.addDecoder(clazz: [EventDistrictPointsTiebreakers].self) { (source: AnyObject) -> [EventDistrictPointsTiebreakers] in
                return Decoders.decode(clazz: [EventDistrictPointsTiebreakers].self, source: source)
            }
            // Decoder for EventDistrictPointsTiebreakers
            Decoders.addDecoder(clazz: EventDistrictPointsTiebreakers.self) { (source: AnyObject) -> EventDistrictPointsTiebreakers in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = EventDistrictPointsTiebreakers()
                instance.highestQualScores = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["highest_qual_scores"])
                instance.qualWins = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["qual_wins"])
                return instance
            }


            // Decoder for [EventInsights]
            Decoders.addDecoder(clazz: [EventInsights].self) { (source: AnyObject) -> [EventInsights] in
                return Decoders.decode(clazz: [EventInsights].self, source: source)
            }
            // Decoder for EventInsights
            Decoders.addDecoder(clazz: EventInsights.self) { (source: AnyObject) -> EventInsights in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = EventInsights()
                instance.qual = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["qual"])
                instance.playoff = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["playoff"])
                return instance
            }


            // Decoder for [EventInsights2016]
            Decoders.addDecoder(clazz: [EventInsights2016].self) { (source: AnyObject) -> [EventInsights2016] in
                return Decoders.decode(clazz: [EventInsights2016].self, source: source)
            }
            // Decoder for EventInsights2016
            Decoders.addDecoder(clazz: EventInsights2016.self) { (source: AnyObject) -> EventInsights2016 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = EventInsights2016(lowBar: Decoders.decode(clazz: Array.self, source: sourceDictionary["LowBar"]!), aChevalDeFrise: Decoders.decode(clazz: Array.self, source: sourceDictionary["A_ChevalDeFrise"]!), aPortcullis: Decoders.decode(clazz: Array.self, source: sourceDictionary["A_Portcullis"]!), bRamparts: Decoders.decode(clazz: Array.self, source: sourceDictionary["B_Ramparts"]!), bMoat: Decoders.decode(clazz: Array.self, source: sourceDictionary["B_Moat"]!), cSallyPort: Decoders.decode(clazz: Array.self, source: sourceDictionary["C_SallyPort"]!), cDrawbridge: Decoders.decode(clazz: Array.self, source: sourceDictionary["C_Drawbridge"]!), dRoughTerrain: Decoders.decode(clazz: Array.self, source: sourceDictionary["D_RoughTerrain"]!), dRockWall: Decoders.decode(clazz: Array.self, source: sourceDictionary["D_RockWall"]!), averageHighGoals: Decoders.decode(clazz: Float.self, source: sourceDictionary["average_high_goals"]!), averageLowGoals: Decoders.decode(clazz: Float.self, source: sourceDictionary["average_low_goals"]!), breaches: Decoders.decode(clazz: Array.self, source: sourceDictionary["breaches"]!), scales: Decoders.decode(clazz: Array.self, source: sourceDictionary["scales"]!), challenges: Decoders.decode(clazz: Array.self, source: sourceDictionary["challenges"]!), captures: Decoders.decode(clazz: Array.self, source: sourceDictionary["captures"]!), averageWinScore: Decoders.decode(clazz: Float.self, source: sourceDictionary["average_win_score"]!), averageWinMargin: Decoders.decode(clazz: Float.self, source: sourceDictionary["average_win_margin"]!), averageScore: Decoders.decode(clazz: Float.self, source: sourceDictionary["average_score"]!), averageAutoScore: Decoders.decode(clazz: Float.self, source: sourceDictionary["average_auto_score"]!), averageCrossingScore: Decoders.decode(clazz: Float.self, source: sourceDictionary["average_crossing_score"]!), averageBoulderScore: Decoders.decode(clazz: Float.self, source: sourceDictionary["average_boulder_score"]!), averageTowerScore: Decoders.decode(clazz: Float.self, source: sourceDictionary["average_tower_score"]!), averageFoulScore: Decoders.decode(clazz: Float.self, source: sourceDictionary["average_foul_score"]!), highScore: Decoders.decode(clazz: Array.self, source: sourceDictionary["high_score"]!))
                return instance
            }


            // Decoder for [EventInsights2017]
            Decoders.addDecoder(clazz: [EventInsights2017].self) { (source: AnyObject) -> [EventInsights2017] in
                return Decoders.decode(clazz: [EventInsights2017].self, source: source)
            }
            // Decoder for EventInsights2017
            Decoders.addDecoder(clazz: EventInsights2017.self) { (source: AnyObject) -> EventInsights2017 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = EventInsights2017(averageFoulScore: Decoders.decode(clazz: Float.self, source: sourceDictionary["average_foul_score"]!), averageFuelPoints: Decoders.decode(clazz: Float.self, source: sourceDictionary["average_fuel_points"]!), averageFuelPointsAuto: Decoders.decode(clazz: Float.self, source: sourceDictionary["average_fuel_points_auto"]!), averageFuelPointsTeleop: Decoders.decode(clazz: Float.self, source: sourceDictionary["average_fuel_points_teleop"]!), averageHighGoals: Decoders.decode(clazz: Float.self, source: sourceDictionary["average_high_goals"]!), averageHighGoalsAuto: Decoders.decode(clazz: Float.self, source: sourceDictionary["average_high_goals_auto"]!), averageHighGoalsTeleop: Decoders.decode(clazz: Float.self, source: sourceDictionary["average_high_goals_teleop"]!), averageLowGoals: Decoders.decode(clazz: Float.self, source: sourceDictionary["average_low_goals"]!), averageLowGoalsAuto: Decoders.decode(clazz: Float.self, source: sourceDictionary["average_low_goals_auto"]!), averageLowGoalsTeleop: Decoders.decode(clazz: Float.self, source: sourceDictionary["average_low_goals_teleop"]!), averageMobilityPointsAuto: Decoders.decode(clazz: Float.self, source: sourceDictionary["average_mobility_points_auto"]!), averagePointsAuto: Decoders.decode(clazz: Float.self, source: sourceDictionary["average_points_auto"]!), averagePointsTeleop: Decoders.decode(clazz: Float.self, source: sourceDictionary["average_points_teleop"]!), averageRotorPoints: Decoders.decode(clazz: Float.self, source: sourceDictionary["average_rotor_points"]!), averageRotorPointsAuto: Decoders.decode(clazz: Float.self, source: sourceDictionary["average_rotor_points_auto"]!), averageRotorPointsTeleop: Decoders.decode(clazz: Float.self, source: sourceDictionary["average_rotor_points_teleop"]!), averageScore: Decoders.decode(clazz: Float.self, source: sourceDictionary["average_score"]!), averageTakeoffPointsTeleop: Decoders.decode(clazz: Float.self, source: sourceDictionary["average_takeoff_points_teleop"]!), averageWinMargin: Decoders.decode(clazz: Float.self, source: sourceDictionary["average_win_margin"]!), averageWinScore: Decoders.decode(clazz: Float.self, source: sourceDictionary["average_win_score"]!), highKpa: Decoders.decode(clazz: Array.self, source: sourceDictionary["high_kpa"]!), highScore: Decoders.decode(clazz: Array.self, source: sourceDictionary["high_score"]!), kpaAchieved: Decoders.decode(clazz: Array.self, source: sourceDictionary["kpa_achieved"]!), mobilityCounts: Decoders.decode(clazz: Array.self, source: sourceDictionary["mobility_counts"]!), rotor1Engaged: Decoders.decode(clazz: Array.self, source: sourceDictionary["rotor_1_engaged"]!), rotor1EngagedAuto: Decoders.decode(clazz: Array.self, source: sourceDictionary["rotor_1_engaged_auto"]!), rotor2Engaged: Decoders.decode(clazz: Array.self, source: sourceDictionary["rotor_2_engaged"]!), rotor2EngagedAuto: Decoders.decode(clazz: Array.self, source: sourceDictionary["rotor_2_engaged_auto"]!), rotor3Engaged: Decoders.decode(clazz: Array.self, source: sourceDictionary["rotor_3_engaged"]!), rotor4Engaged: Decoders.decode(clazz: Array.self, source: sourceDictionary["rotor_4_engaged"]!), takeoffCounts: Decoders.decode(clazz: Array.self, source: sourceDictionary["takeoff_counts"]!), unicornMatches: Decoders.decode(clazz: Array.self, source: sourceDictionary["unicorn_matches"]!))
                return instance
            }


            // Decoder for [EventInsights2018]
            Decoders.addDecoder(clazz: [EventInsights2018].self) { (source: AnyObject) -> [EventInsights2018] in
                return Decoders.decode(clazz: [EventInsights2018].self, source: source)
            }
            // Decoder for EventInsights2018
            Decoders.addDecoder(clazz: EventInsights2018.self) { (source: AnyObject) -> EventInsights2018 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = EventInsights2018(autoQuestAchieved: Decoders.decode(clazz: Array.self, source: sourceDictionary["auto_quest_achieved"]!), averageBoostPlayed: Decoders.decode(clazz: Float.self, source: sourceDictionary["average_boost_played"]!), averageEndgamePoints: Decoders.decode(clazz: Float.self, source: sourceDictionary["average_endgame_points"]!), averageForcePlayed: Decoders.decode(clazz: Float.self, source: sourceDictionary["average_force_played"]!), averageFoulScore: Decoders.decode(clazz: Float.self, source: sourceDictionary["average_foul_score"]!), averagePointsAuto: Decoders.decode(clazz: Float.self, source: sourceDictionary["average_points_auto"]!), averagePointsTeleop: Decoders.decode(clazz: Float.self, source: sourceDictionary["average_points_teleop"]!), averageRunPointsAuto: Decoders.decode(clazz: Float.self, source: sourceDictionary["average_run_points_auto"]!), averageScaleOwnershipPoints: Decoders.decode(clazz: Float.self, source: sourceDictionary["average_scale_ownership_points"]!), averageScaleOwnershipPointsAuto: Decoders.decode(clazz: Float.self, source: sourceDictionary["average_scale_ownership_points_auto"]!), averageScaleOwnershipPointsTeleop: Decoders.decode(clazz: Float.self, source: sourceDictionary["average_scale_ownership_points_teleop"]!), averageScore: Decoders.decode(clazz: Float.self, source: sourceDictionary["average_score"]!), averageSwitchOwnershipPoints: Decoders.decode(clazz: Float.self, source: sourceDictionary["average_switch_ownership_points"]!), averageSwitchOwnershipPointsAuto: Decoders.decode(clazz: Float.self, source: sourceDictionary["average_switch_ownership_points_auto"]!), averageSwitchOwnershipPointsTeleop: Decoders.decode(clazz: Float.self, source: sourceDictionary["average_switch_ownership_points_teleop"]!), averageVaultPoints: Decoders.decode(clazz: Float.self, source: sourceDictionary["average_vault_points"]!), averageWinMargin: Decoders.decode(clazz: Float.self, source: sourceDictionary["average_win_margin"]!), averageWinScore: Decoders.decode(clazz: Float.self, source: sourceDictionary["average_win_score"]!), boostPlayedCounts: Decoders.decode(clazz: Array.self, source: sourceDictionary["boost_played_counts"]!), climbCounts: Decoders.decode(clazz: Array.self, source: sourceDictionary["climb_counts"]!), faceTheBossAchieved: Decoders.decode(clazz: Array.self, source: sourceDictionary["face_the_boss_achieved"]!), forcePlayedCounts: Decoders.decode(clazz: Array.self, source: sourceDictionary["force_played_counts"]!), highScore: Decoders.decode(clazz: Array.self, source: sourceDictionary["high_score"]!), levitatePlayedCounts: Decoders.decode(clazz: Array.self, source: sourceDictionary["levitate_played_counts"]!), runCountsAuto: Decoders.decode(clazz: Array.self, source: sourceDictionary["run_counts_auto"]!), scaleNeutralPercentage: Decoders.decode(clazz: Float.self, source: sourceDictionary["scale_neutral_percentage"]!), scaleNeutralPercentageAuto: Decoders.decode(clazz: Float.self, source: sourceDictionary["scale_neutral_percentage_auto"]!), scaleNeutralPercentageTeleop: Decoders.decode(clazz: Float.self, source: sourceDictionary["scale_neutral_percentage_teleop"]!), switchOwnedCountsAuto: Decoders.decode(clazz: Array.self, source: sourceDictionary["switch_owned_counts_auto"]!), unicornMatches: Decoders.decode(clazz: Array.self, source: sourceDictionary["unicorn_matches"]!), winningOppSwitchDenialPercentageTeleop: Decoders.decode(clazz: Float.self, source: sourceDictionary["winning_opp_switch_denial_percentage_teleop"]!), winningOwnSwitchOwnershipPercentage: Decoders.decode(clazz: Float.self, source: sourceDictionary["winning_own_switch_ownership_percentage"]!), winningOwnSwitchOwnershipPercentageAuto: Decoders.decode(clazz: Float.self, source: sourceDictionary["winning_own_switch_ownership_percentage_auto"]!), winningOwnSwitchOwnershipPercentageTeleop: Decoders.decode(clazz: Float.self, source: sourceDictionary["winning_own_switch_ownership_percentage_teleop"]!), winningScaleOwnershipPercentage: Decoders.decode(clazz: Float.self, source: sourceDictionary["winning_scale_ownership_percentage"]!), winningScaleOwnershipPercentageAuto: Decoders.decode(clazz: Float.self, source: sourceDictionary["winning_scale_ownership_percentage_auto"]!), winningScaleOwnershipPercentageTeleop: Decoders.decode(clazz: Float.self, source: sourceDictionary["winning_scale_ownership_percentage_teleop"]!))
                return instance
            }


            // Decoder for [EventOPRs]
            Decoders.addDecoder(clazz: [EventOPRs].self) { (source: AnyObject) -> [EventOPRs] in
                return Decoders.decode(clazz: [EventOPRs].self, source: source)
            }
            // Decoder for EventOPRs
            Decoders.addDecoder(clazz: EventOPRs.self) { (source: AnyObject) -> EventOPRs in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = EventOPRs()
                instance.oprs = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["oprs"])
                instance.dprs = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["dprs"])
                instance.ccwms = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["ccwms"])
                return instance
            }


            // Decoder for [EventPredictions]
            Decoders.addDecoder(clazz: [EventPredictions].self) { (source: AnyObject) -> [EventPredictions] in
                return Decoders.decode(clazz: [EventPredictions].self, source: source)
            }
            // Decoder for EventPredictions
            Decoders.addDecoder(clazz: EventPredictions.self) { (source: AnyObject) -> EventPredictions in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = EventPredictions()
                return instance
            }


            // Decoder for [EventRanking]
            Decoders.addDecoder(clazz: [EventRanking].self) { (source: AnyObject) -> [EventRanking] in
                return Decoders.decode(clazz: [EventRanking].self, source: source)
            }
            // Decoder for EventRanking
            Decoders.addDecoder(clazz: EventRanking.self) { (source: AnyObject) -> EventRanking in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = EventRanking(rankings: Decoders.decode(clazz: Array.self, source: sourceDictionary["rankings"]!), sortOrderInfo: Decoders.decode(clazz: Array.self, source: sourceDictionary["sort_order_info"]!))
                instance.extraStatsInfo = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["extra_stats_info"])
                return instance
            }


            // Decoder for [EventRankingExtraStatsInfo]
            Decoders.addDecoder(clazz: [EventRankingExtraStatsInfo].self) { (source: AnyObject) -> [EventRankingExtraStatsInfo] in
                return Decoders.decode(clazz: [EventRankingExtraStatsInfo].self, source: source)
            }
            // Decoder for EventRankingExtraStatsInfo
            Decoders.addDecoder(clazz: EventRankingExtraStatsInfo.self) { (source: AnyObject) -> EventRankingExtraStatsInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = EventRankingExtraStatsInfo(name: Decoders.decode(clazz: String.self, source: sourceDictionary["name"]!), precision: Decoders.decode(clazz: Double.self, source: sourceDictionary["precision"]!))
                return instance
            }


            // Decoder for [EventRankingRankings]
            Decoders.addDecoder(clazz: [EventRankingRankings].self) { (source: AnyObject) -> [EventRankingRankings] in
                return Decoders.decode(clazz: [EventRankingRankings].self, source: source)
            }
            // Decoder for EventRankingRankings
            Decoders.addDecoder(clazz: EventRankingRankings.self) { (source: AnyObject) -> EventRankingRankings in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = EventRankingRankings(dq: Decoders.decode(clazz: Int32.self, source: sourceDictionary["dq"]!), matchesPlayed: Decoders.decode(clazz: Int32.self, source: sourceDictionary["matches_played"]!), rank: Decoders.decode(clazz: Int32.self, source: sourceDictionary["rank"]!), record: Decoders.decode(clazz: WLTRecord.self, source: sourceDictionary["record"]!), teamKey: Decoders.decode(clazz: String.self, source: sourceDictionary["team_key"]!))
                instance.qualAverage = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["qual_average"])
                instance.extraStats = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["extra_stats"])
                instance.sortOrders = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort_orders"])
                return instance
            }


            // Decoder for [EventRankingSortOrderInfo]
            Decoders.addDecoder(clazz: [EventRankingSortOrderInfo].self) { (source: AnyObject) -> [EventRankingSortOrderInfo] in
                return Decoders.decode(clazz: [EventRankingSortOrderInfo].self, source: source)
            }
            // Decoder for EventRankingSortOrderInfo
            Decoders.addDecoder(clazz: EventRankingSortOrderInfo.self) { (source: AnyObject) -> EventRankingSortOrderInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = EventRankingSortOrderInfo(name: Decoders.decode(clazz: String.self, source: sourceDictionary["name"]!), precision: Decoders.decode(clazz: Int32.self, source: sourceDictionary["precision"]!))
                return instance
            }


            // Decoder for [EventSimple]
            Decoders.addDecoder(clazz: [EventSimple].self) { (source: AnyObject) -> [EventSimple] in
                return Decoders.decode(clazz: [EventSimple].self, source: source)
            }
            // Decoder for EventSimple
            Decoders.addDecoder(clazz: EventSimple.self) { (source: AnyObject) -> EventSimple in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = EventSimple(key: Decoders.decode(clazz: String.self, source: sourceDictionary["key"]!), name: Decoders.decode(clazz: String.self, source: sourceDictionary["name"]!), eventCode: Decoders.decode(clazz: String.self, source: sourceDictionary["event_code"]!), eventType: Decoders.decode(clazz: Int32.self, source: sourceDictionary["event_type"]!), startDate: Decoders.decode(clazz: ISOFullDate.self, source: sourceDictionary["start_date"]!), endDate: Decoders.decode(clazz: ISOFullDate.self, source: sourceDictionary["end_date"]!), year: Decoders.decode(clazz: Int32.self, source: sourceDictionary["year"]!))
                instance.district = Decoders.decodeOptional(clazz: DistrictList.self, source: sourceDictionary["district"])
                instance.city = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["city"])
                instance.stateProv = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["state_prov"])
                instance.country = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country"])
                return instance
            }


            // Decoder for [Match]
            Decoders.addDecoder(clazz: [Match].self) { (source: AnyObject) -> [Match] in
                return Decoders.decode(clazz: [Match].self, source: source)
            }
            // Decoder for Match
            Decoders.addDecoder(clazz: Match.self) { (source: AnyObject) -> Match in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Match(key: Decoders.decode(clazz: String.self, source: sourceDictionary["key"]!), compLevel: Match.CompLevel(rawValue: (sourceDictionary["comp_level"] as? String) ?? "")! , setNumber: Decoders.decode(clazz: Int32.self, source: sourceDictionary["set_number"]!), matchNumber: Decoders.decode(clazz: Int32.self, source: sourceDictionary["match_number"]!), eventKey: Decoders.decode(clazz: String.self, source: sourceDictionary["event_key"]!))
                instance.alliances = Decoders.decodeOptional(clazz: MatchSimpleAlliances.self, source: sourceDictionary["alliances"])
                instance.winningAlliance = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["winning_alliance"])
                instance.time = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["time"])
                instance.actualTime = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["actual_time"])
                instance.predictedTime = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["predicted_time"])
                instance.postResultTime = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["post_result_time"])
                instance.scoreBreakdown = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["score_breakdown"])
                instance.videos = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["videos"])
                return instance
            }


            // Decoder for [MatchAlliance]
            Decoders.addDecoder(clazz: [MatchAlliance].self) { (source: AnyObject) -> [MatchAlliance] in
                return Decoders.decode(clazz: [MatchAlliance].self, source: source)
            }
            // Decoder for MatchAlliance
            Decoders.addDecoder(clazz: MatchAlliance.self) { (source: AnyObject) -> MatchAlliance in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MatchAlliance(score: Decoders.decode(clazz: Int32.self, source: sourceDictionary["score"]!), teamKeys: Decoders.decode(clazz: Array.self, source: sourceDictionary["team_keys"]!))
                instance.surrogateTeamKeys = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["surrogate_team_keys"])
                instance.dqTeamKeys = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["dq_team_keys"])
                return instance
            }


            // Decoder for [MatchScoreBreakdown2015]
            Decoders.addDecoder(clazz: [MatchScoreBreakdown2015].self) { (source: AnyObject) -> [MatchScoreBreakdown2015] in
                return Decoders.decode(clazz: [MatchScoreBreakdown2015].self, source: source)
            }
            // Decoder for MatchScoreBreakdown2015
            Decoders.addDecoder(clazz: MatchScoreBreakdown2015.self) { (source: AnyObject) -> MatchScoreBreakdown2015 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MatchScoreBreakdown2015()
                instance.blue = Decoders.decodeOptional(clazz: MatchScoreBreakdown2015Alliance.self, source: sourceDictionary["blue"])
                instance.red = Decoders.decodeOptional(clazz: MatchScoreBreakdown2015Alliance.self, source: sourceDictionary["red"])
                instance.coopertition = MatchScoreBreakdown2015.Coopertition(rawValue: (sourceDictionary["coopertition"] as? String) ?? "")
                instance.coopertitionPoints = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["coopertition_points"])
                return instance
            }


            // Decoder for [MatchScoreBreakdown2015Alliance]
            Decoders.addDecoder(clazz: [MatchScoreBreakdown2015Alliance].self) { (source: AnyObject) -> [MatchScoreBreakdown2015Alliance] in
                return Decoders.decode(clazz: [MatchScoreBreakdown2015Alliance].self, source: source)
            }
            // Decoder for MatchScoreBreakdown2015Alliance
            Decoders.addDecoder(clazz: MatchScoreBreakdown2015Alliance.self) { (source: AnyObject) -> MatchScoreBreakdown2015Alliance in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MatchScoreBreakdown2015Alliance()
                instance.autoPoints = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["auto_points"])
                instance.teleopPoints = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["teleop_points"])
                instance.containerPoints = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["container_points"])
                instance.totePoints = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["tote_points"])
                instance.litterPoints = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["litter_points"])
                instance.foulPoints = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["foul_points"])
                instance.adjustPoints = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["adjust_points"])
                instance.totalPoints = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_points"])
                instance.foulCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["foul_count"])
                instance.toteCountFar = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["tote_count_far"])
                instance.toteCountNear = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["tote_count_near"])
                instance.toteSet = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["tote_set"])
                instance.toteStack = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["tote_stack"])
                instance.containerCountLevel1 = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["container_count_level1"])
                instance.containerCountLevel2 = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["container_count_level2"])
                instance.containerCountLevel3 = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["container_count_level3"])
                instance.containerCountLevel4 = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["container_count_level4"])
                instance.containerCountLevel5 = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["container_count_level5"])
                instance.containerCountLevel6 = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["container_count_level6"])
                instance.containerSet = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["container_set"])
                instance.litterCountContainer = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["litter_count_container"])
                instance.litterCountLandfill = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["litter_count_landfill"])
                instance.litterCountUnprocessed = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["litter_count_unprocessed"])
                instance.robotSet = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["robot_set"])
                return instance
            }


            // Decoder for [MatchScoreBreakdown2016]
            Decoders.addDecoder(clazz: [MatchScoreBreakdown2016].self) { (source: AnyObject) -> [MatchScoreBreakdown2016] in
                return Decoders.decode(clazz: [MatchScoreBreakdown2016].self, source: source)
            }
            // Decoder for MatchScoreBreakdown2016
            Decoders.addDecoder(clazz: MatchScoreBreakdown2016.self) { (source: AnyObject) -> MatchScoreBreakdown2016 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MatchScoreBreakdown2016()
                instance.blue = Decoders.decodeOptional(clazz: MatchScoreBreakdown2016Alliance.self, source: sourceDictionary["blue"])
                instance.red = Decoders.decodeOptional(clazz: MatchScoreBreakdown2016Alliance.self, source: sourceDictionary["red"])
                return instance
            }


            // Decoder for [MatchScoreBreakdown2016Alliance]
            Decoders.addDecoder(clazz: [MatchScoreBreakdown2016Alliance].self) { (source: AnyObject) -> [MatchScoreBreakdown2016Alliance] in
                return Decoders.decode(clazz: [MatchScoreBreakdown2016Alliance].self, source: source)
            }
            // Decoder for MatchScoreBreakdown2016Alliance
            Decoders.addDecoder(clazz: MatchScoreBreakdown2016Alliance.self) { (source: AnyObject) -> MatchScoreBreakdown2016Alliance in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MatchScoreBreakdown2016Alliance()
                instance.autoPoints = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["autoPoints"])
                instance.teleopPoints = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["teleopPoints"])
                instance.breachPoints = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["breachPoints"])
                instance.foulPoints = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["foulPoints"])
                instance.capturePoints = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["capturePoints"])
                instance.adjustPoints = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["adjustPoints"])
                instance.totalPoints = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["totalPoints"])
                instance.robot1Auto = MatchScoreBreakdown2016Alliance.Robot1Auto(rawValue: (sourceDictionary["robot1Auto"] as? String) ?? "")
                instance.robot2Auto = MatchScoreBreakdown2016Alliance.Robot2Auto(rawValue: (sourceDictionary["robot2Auto"] as? String) ?? "")
                instance.robot3Auto = MatchScoreBreakdown2016Alliance.Robot3Auto(rawValue: (sourceDictionary["robot3Auto"] as? String) ?? "")
                instance.autoReachPoints = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["autoReachPoints"])
                instance.autoCrossingPoints = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["autoCrossingPoints"])
                instance.autoBouldersLow = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["autoBouldersLow"])
                instance.autoBouldersHigh = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["autoBouldersHigh"])
                instance.autoBoulderPoints = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["autoBoulderPoints"])
                instance.teleopCrossingPoints = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["teleopCrossingPoints"])
                instance.teleopBouldersLow = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["teleopBouldersLow"])
                instance.teleopBouldersHigh = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["teleopBouldersHigh"])
                instance.teleopBoulderPoints = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["teleopBoulderPoints"])
                instance.teleopDefensesBreached = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["teleopDefensesBreached"])
                instance.teleopChallengePoints = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["teleopChallengePoints"])
                instance.teleopScalePoints = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["teleopScalePoints"])
                instance.teleopTowerCaptured = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["teleopTowerCaptured"])
                instance.towerFaceA = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["towerFaceA"])
                instance.towerFaceB = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["towerFaceB"])
                instance.towerFaceC = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["towerFaceC"])
                instance.towerEndStrength = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["towerEndStrength"])
                instance.techFoulCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["techFoulCount"])
                instance.foulCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["foulCount"])
                instance.position2 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["position2"])
                instance.position3 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["position3"])
                instance.position4 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["position4"])
                instance.position5 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["position5"])
                instance.position1crossings = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["position1crossings"])
                instance.position2crossings = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["position2crossings"])
                instance.position3crossings = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["position3crossings"])
                instance.position4crossings = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["position4crossings"])
                instance.position5crossings = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["position5crossings"])
                return instance
            }


            // Decoder for [MatchScoreBreakdown2017]
            Decoders.addDecoder(clazz: [MatchScoreBreakdown2017].self) { (source: AnyObject) -> [MatchScoreBreakdown2017] in
                return Decoders.decode(clazz: [MatchScoreBreakdown2017].self, source: source)
            }
            // Decoder for MatchScoreBreakdown2017
            Decoders.addDecoder(clazz: MatchScoreBreakdown2017.self) { (source: AnyObject) -> MatchScoreBreakdown2017 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MatchScoreBreakdown2017()
                instance.blue = Decoders.decodeOptional(clazz: MatchScoreBreakdown2017Alliance.self, source: sourceDictionary["blue"])
                instance.red = Decoders.decodeOptional(clazz: MatchScoreBreakdown2017Alliance.self, source: sourceDictionary["red"])
                return instance
            }


            // Decoder for [MatchScoreBreakdown2017Alliance]
            Decoders.addDecoder(clazz: [MatchScoreBreakdown2017Alliance].self) { (source: AnyObject) -> [MatchScoreBreakdown2017Alliance] in
                return Decoders.decode(clazz: [MatchScoreBreakdown2017Alliance].self, source: source)
            }
            // Decoder for MatchScoreBreakdown2017Alliance
            Decoders.addDecoder(clazz: MatchScoreBreakdown2017Alliance.self) { (source: AnyObject) -> MatchScoreBreakdown2017Alliance in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MatchScoreBreakdown2017Alliance()
                instance.autoPoints = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["autoPoints"])
                instance.teleopPoints = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["teleopPoints"])
                instance.foulPoints = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["foulPoints"])
                instance.adjustPoints = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["adjustPoints"])
                instance.totalPoints = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["totalPoints"])
                instance.robot1Auto = MatchScoreBreakdown2017Alliance.Robot1Auto(rawValue: (sourceDictionary["robot1Auto"] as? String) ?? "")
                instance.robot2Auto = MatchScoreBreakdown2017Alliance.Robot2Auto(rawValue: (sourceDictionary["robot2Auto"] as? String) ?? "")
                instance.robot3Auto = MatchScoreBreakdown2017Alliance.Robot3Auto(rawValue: (sourceDictionary["robot3Auto"] as? String) ?? "")
                instance.rotor1Auto = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["rotor1Auto"])
                instance.rotor2Auto = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["rotor2Auto"])
                instance.autoFuelLow = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["autoFuelLow"])
                instance.autoFuelHigh = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["autoFuelHigh"])
                instance.autoMobilityPoints = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["autoMobilityPoints"])
                instance.autoRotorPoints = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["autoRotorPoints"])
                instance.autoFuelPoints = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["autoFuelPoints"])
                instance.teleopFuelPoints = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["teleopFuelPoints"])
                instance.teleopFuelLow = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["teleopFuelLow"])
                instance.teleopFuelHigh = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["teleopFuelHigh"])
                instance.teleopRotorPoints = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["teleopRotorPoints"])
                instance.kPaRankingPointAchieved = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["kPaRankingPointAchieved"])
                instance.teleopTakeoffPoints = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["teleopTakeoffPoints"])
                instance.kPaBonusPoints = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["kPaBonusPoints"])
                instance.rotorBonusPoints = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["rotorBonusPoints"])
                instance.rotor1Engaged = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["rotor1Engaged"])
                instance.rotor2Engaged = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["rotor2Engaged"])
                instance.rotor3Engaged = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["rotor3Engaged"])
                instance.rotor4Engaged = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["rotor4Engaged"])
                instance.rotorRankingPointAchieved = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["rotorRankingPointAchieved"])
                instance.techFoulCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["techFoulCount"])
                instance.foulCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["foulCount"])
                instance.touchpadNear = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["touchpadNear"])
                instance.touchpadMiddle = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["touchpadMiddle"])
                instance.touchpadFar = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["touchpadFar"])
                return instance
            }


            // Decoder for [MatchScoreBreakdown2018]
            Decoders.addDecoder(clazz: [MatchScoreBreakdown2018].self) { (source: AnyObject) -> [MatchScoreBreakdown2018] in
                return Decoders.decode(clazz: [MatchScoreBreakdown2018].self, source: source)
            }
            // Decoder for MatchScoreBreakdown2018
            Decoders.addDecoder(clazz: MatchScoreBreakdown2018.self) { (source: AnyObject) -> MatchScoreBreakdown2018 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MatchScoreBreakdown2018()
                instance.blue = Decoders.decodeOptional(clazz: MatchScoreBreakdown2018Alliance.self, source: sourceDictionary["blue"])
                instance.red = Decoders.decodeOptional(clazz: MatchScoreBreakdown2018Alliance.self, source: sourceDictionary["red"])
                return instance
            }


            // Decoder for [MatchScoreBreakdown2018Alliance]
            Decoders.addDecoder(clazz: [MatchScoreBreakdown2018Alliance].self) { (source: AnyObject) -> [MatchScoreBreakdown2018Alliance] in
                return Decoders.decode(clazz: [MatchScoreBreakdown2018Alliance].self, source: source)
            }
            // Decoder for MatchScoreBreakdown2018Alliance
            Decoders.addDecoder(clazz: MatchScoreBreakdown2018Alliance.self) { (source: AnyObject) -> MatchScoreBreakdown2018Alliance in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MatchScoreBreakdown2018Alliance()
                instance.adjustPoints = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["adjustPoints"])
                instance.autoOwnershipPoints = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["autoOwnershipPoints"])
                instance.autoPoints = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["autoPoints"])
                instance.autoQuestRankingPoint = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["autoQuestRankingPoint"])
                instance.autoRobot1 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["autoRobot1"])
                instance.autoRobot2 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["autoRobot2"])
                instance.autoRobot3 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["autoRobot3"])
                instance.autoRunPoints = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["autoRunPoints"])
                instance.autoScaleOwnershipSec = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["autoScaleOwnershipSec"])
                instance.autoSwitchAtZero = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["autoSwitchAtZero"])
                instance.autoSwitchOwnershipSec = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["autoSwitchOwnershipSec"])
                instance.endgamePoints = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["endgamePoints"])
                instance.endgameRobot1 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["endgameRobot1"])
                instance.endgameRobot2 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["endgameRobot2"])
                instance.endgameRobot3 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["endgameRobot3"])
                instance.faceTheBossRankingPoint = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["faceTheBossRankingPoint"])
                instance.foulCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["foulCount"])
                instance.foulPoints = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["foulPoints"])
                instance.rp = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["rp"])
                instance.techFoulCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["techFoulCount"])
                instance.teleopOwnershipPoints = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["teleopOwnershipPoints"])
                instance.teleopPoints = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["teleopPoints"])
                instance.teleopScaleBoostSec = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["teleopScaleBoostSec"])
                instance.teleopScaleForceSec = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["teleopScaleForceSec"])
                instance.teleopScaleOwnershipSec = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["teleopScaleOwnershipSec"])
                instance.teleopSwitchBoostSec = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["teleopSwitchBoostSec"])
                instance.teleopSwitchForceSec = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["teleopSwitchForceSec"])
                instance.teleopSwitchOwnershipSec = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["teleopSwitchOwnershipSec"])
                instance.totalPoints = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["totalPoints"])
                instance.vaultBoostPlayed = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["vaultBoostPlayed"])
                instance.vaultBoostTotal = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["vaultBoostTotal"])
                instance.vaultForcePlayed = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["vaultForcePlayed"])
                instance.vaultForceTotal = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["vaultForceTotal"])
                instance.vaultLevitatePlayed = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["vaultLevitatePlayed"])
                instance.vaultLevitateTotal = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["vaultLevitateTotal"])
                instance.vaultPoints = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["vaultPoints"])
                instance.tbaGameData = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["tba_gameData"])
                return instance
            }


            // Decoder for [MatchSimple]
            Decoders.addDecoder(clazz: [MatchSimple].self) { (source: AnyObject) -> [MatchSimple] in
                return Decoders.decode(clazz: [MatchSimple].self, source: source)
            }
            // Decoder for MatchSimple
            Decoders.addDecoder(clazz: MatchSimple.self) { (source: AnyObject) -> MatchSimple in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MatchSimple(key: Decoders.decode(clazz: String.self, source: sourceDictionary["key"]!), compLevel: MatchSimple.CompLevel(rawValue: (sourceDictionary["comp_level"] as? String) ?? "")! , setNumber: Decoders.decode(clazz: Int32.self, source: sourceDictionary["set_number"]!), matchNumber: Decoders.decode(clazz: Int32.self, source: sourceDictionary["match_number"]!), eventKey: Decoders.decode(clazz: String.self, source: sourceDictionary["event_key"]!))
                instance.alliances = Decoders.decodeOptional(clazz: MatchSimpleAlliances.self, source: sourceDictionary["alliances"])
                instance.winningAlliance = MatchSimple.WinningAlliance(rawValue: (sourceDictionary["winning_alliance"] as? String) ?? "")
                instance.time = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["time"])
                instance.predictedTime = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["predicted_time"])
                instance.actualTime = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["actual_time"])
                return instance
            }


            // Decoder for [MatchSimpleAlliances]
            Decoders.addDecoder(clazz: [MatchSimpleAlliances].self) { (source: AnyObject) -> [MatchSimpleAlliances] in
                return Decoders.decode(clazz: [MatchSimpleAlliances].self, source: source)
            }
            // Decoder for MatchSimpleAlliances
            Decoders.addDecoder(clazz: MatchSimpleAlliances.self) { (source: AnyObject) -> MatchSimpleAlliances in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MatchSimpleAlliances()
                instance.blue = Decoders.decodeOptional(clazz: MatchAlliance.self, source: sourceDictionary["blue"])
                instance.red = Decoders.decodeOptional(clazz: MatchAlliance.self, source: sourceDictionary["red"])
                return instance
            }


            // Decoder for [MatchTimeseries2018]
            Decoders.addDecoder(clazz: [MatchTimeseries2018].self) { (source: AnyObject) -> [MatchTimeseries2018] in
                return Decoders.decode(clazz: [MatchTimeseries2018].self, source: source)
            }
            // Decoder for MatchTimeseries2018
            Decoders.addDecoder(clazz: MatchTimeseries2018.self) { (source: AnyObject) -> MatchTimeseries2018 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MatchTimeseries2018()
                instance.eventKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["event_key"])
                instance.matchId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["match_id"])
                instance.mode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["mode"])
                instance.play = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["play"])
                instance.timeRemaining = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["time_remaining"])
                instance.blueAutoQuest = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["blue_auto_quest"])
                instance.blueBoostCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["blue_boost_count"])
                instance.blueBoostPlayed = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["blue_boost_played"])
                instance.blueCurrentPowerup = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["blue_current_powerup"])
                instance.blueFaceTheBoss = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["blue_face_the_boss"])
                instance.blueForceCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["blue_force_count"])
                instance.blueForcePlayed = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["blue_force_played"])
                instance.blueLevitateCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["blue_levitate_count"])
                instance.blueLevitatePlayed = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["blue_levitate_played"])
                instance.bluePowerupTimeRemaining = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["blue_powerup_time_remaining"])
                instance.blueScaleOwned = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["blue_scale_owned"])
                instance.blueScore = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["blue_score"])
                instance.blueSwitchOwned = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["blue_switch_owned"])
                instance.redAutoQuest = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["red_auto_quest"])
                instance.redBoostCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["red_boost_count"])
                instance.redBoostPlayed = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["red_boost_played"])
                instance.redCurrentPowerup = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["red_current_powerup"])
                instance.redFaceTheBoss = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["red_face_the_boss"])
                instance.redForceCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["red_force_count"])
                instance.redForcePlayed = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["red_force_played"])
                instance.redLevitateCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["red_levitate_count"])
                instance.redLevitatePlayed = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["red_levitate_played"])
                instance.redPowerupTimeRemaining = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["red_powerup_time_remaining"])
                instance.redScaleOwned = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["red_scale_owned"])
                instance.redScore = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["red_score"])
                instance.redSwitchOwned = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["red_switch_owned"])
                return instance
            }


            // Decoder for [MatchVideos]
            Decoders.addDecoder(clazz: [MatchVideos].self) { (source: AnyObject) -> [MatchVideos] in
                return Decoders.decode(clazz: [MatchVideos].self, source: source)
            }
            // Decoder for MatchVideos
            Decoders.addDecoder(clazz: MatchVideos.self) { (source: AnyObject) -> MatchVideos in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MatchVideos()
                instance.key = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["key"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                return instance
            }


            // Decoder for [Media]
            Decoders.addDecoder(clazz: [Media].self) { (source: AnyObject) -> [Media] in
                return Decoders.decode(clazz: [Media].self, source: source)
            }
            // Decoder for Media
            Decoders.addDecoder(clazz: Media.self) { (source: AnyObject) -> Media in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Media(key: Decoders.decode(clazz: String.self, source: sourceDictionary["key"]!), type: Media.ModelType(rawValue: (sourceDictionary["type"] as? String) ?? "")! )
                instance.foreignKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["foreign_key"])
                instance.details = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["details"])
                instance.preferred = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["preferred"])
                return instance
            }


            // Decoder for [Team]
            Decoders.addDecoder(clazz: [Team].self) { (source: AnyObject) -> [Team] in
                return Decoders.decode(clazz: [Team].self, source: source)
            }
            // Decoder for Team
            Decoders.addDecoder(clazz: Team.self) { (source: AnyObject) -> Team in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Team(key: Decoders.decode(clazz: String.self, source: sourceDictionary["key"]!), teamNumber: Decoders.decode(clazz: Int32.self, source: sourceDictionary["team_number"]!), name: Decoders.decode(clazz: String.self, source: sourceDictionary["name"]!), rookieYear: Decoders.decode(clazz: Int32.self, source: sourceDictionary["rookie_year"]!))
                instance.nickname = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nickname"])
                instance.city = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["city"])
                instance.stateProv = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["state_prov"])
                instance.country = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country"])
                instance.address = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["address"])
                instance.postalCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["postal_code"])
                instance.gmapsPlaceId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["gmaps_place_id"])
                instance.gmapsUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["gmaps_url"])
                instance.lat = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lat"])
                instance.lng = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lng"])
                instance.locationName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["location_name"])
                instance.website = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["website"])
                instance.motto = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["motto"])
                instance.homeChampionship = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["home_championship"])
                return instance
            }


            // Decoder for [TeamEventStatus]
            Decoders.addDecoder(clazz: [TeamEventStatus].self) { (source: AnyObject) -> [TeamEventStatus] in
                return Decoders.decode(clazz: [TeamEventStatus].self, source: source)
            }
            // Decoder for TeamEventStatus
            Decoders.addDecoder(clazz: TeamEventStatus.self) { (source: AnyObject) -> TeamEventStatus in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TeamEventStatus()
                instance.qual = Decoders.decodeOptional(clazz: TeamEventStatusRank.self, source: sourceDictionary["qual"])
                instance.alliance = Decoders.decodeOptional(clazz: TeamEventStatusAlliance.self, source: sourceDictionary["alliance"])
                instance.playoff = Decoders.decodeOptional(clazz: TeamEventStatusPlayoff.self, source: sourceDictionary["playoff"])
                instance.allianceStatusStr = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["alliance_status_str"])
                instance.playoffStatusStr = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["playoff_status_str"])
                instance.overallStatusStr = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["overall_status_str"])
                instance.nextMatchKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["next_match_key"])
                instance.lastMatchKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["last_match_key"])
                return instance
            }


            // Decoder for [TeamEventStatusAlliance]
            Decoders.addDecoder(clazz: [TeamEventStatusAlliance].self) { (source: AnyObject) -> [TeamEventStatusAlliance] in
                return Decoders.decode(clazz: [TeamEventStatusAlliance].self, source: source)
            }
            // Decoder for TeamEventStatusAlliance
            Decoders.addDecoder(clazz: TeamEventStatusAlliance.self) { (source: AnyObject) -> TeamEventStatusAlliance in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TeamEventStatusAlliance(number: Decoders.decode(clazz: Int32.self, source: sourceDictionary["number"]!), pick: Decoders.decode(clazz: Int32.self, source: sourceDictionary["pick"]!))
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.backup = Decoders.decodeOptional(clazz: TeamEventStatusAllianceBackup.self, source: sourceDictionary["backup"])
                return instance
            }


            // Decoder for [TeamEventStatusAllianceBackup]
            Decoders.addDecoder(clazz: [TeamEventStatusAllianceBackup].self) { (source: AnyObject) -> [TeamEventStatusAllianceBackup] in
                return Decoders.decode(clazz: [TeamEventStatusAllianceBackup].self, source: source)
            }
            // Decoder for TeamEventStatusAllianceBackup
            Decoders.addDecoder(clazz: TeamEventStatusAllianceBackup.self) { (source: AnyObject) -> TeamEventStatusAllianceBackup in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TeamEventStatusAllianceBackup()
                instance.out = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["out"])
                instance._in = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["in"])
                return instance
            }


            // Decoder for [TeamEventStatusPlayoff]
            Decoders.addDecoder(clazz: [TeamEventStatusPlayoff].self) { (source: AnyObject) -> [TeamEventStatusPlayoff] in
                return Decoders.decode(clazz: [TeamEventStatusPlayoff].self, source: source)
            }
            // Decoder for TeamEventStatusPlayoff
            Decoders.addDecoder(clazz: TeamEventStatusPlayoff.self) { (source: AnyObject) -> TeamEventStatusPlayoff in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TeamEventStatusPlayoff()
                instance.level = TeamEventStatusPlayoff.Level(rawValue: (sourceDictionary["level"] as? String) ?? "")
                instance.currentLevelRecord = Decoders.decodeOptional(clazz: WLTRecord.self, source: sourceDictionary["current_level_record"])
                instance.record = Decoders.decodeOptional(clazz: WLTRecord.self, source: sourceDictionary["record"])
                instance.status = TeamEventStatusPlayoff.Status(rawValue: (sourceDictionary["status"] as? String) ?? "")
                instance.playoffAverage = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["playoff_average"])
                return instance
            }


            // Decoder for [TeamEventStatusRank]
            Decoders.addDecoder(clazz: [TeamEventStatusRank].self) { (source: AnyObject) -> [TeamEventStatusRank] in
                return Decoders.decode(clazz: [TeamEventStatusRank].self, source: source)
            }
            // Decoder for TeamEventStatusRank
            Decoders.addDecoder(clazz: TeamEventStatusRank.self) { (source: AnyObject) -> TeamEventStatusRank in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TeamEventStatusRank()
                instance.numTeams = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["num_teams"])
                instance.ranking = Decoders.decodeOptional(clazz: TeamEventStatusRankRanking.self, source: sourceDictionary["ranking"])
                instance.sortOrderInfo = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort_order_info"])
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"])
                return instance
            }


            // Decoder for [TeamEventStatusRankRanking]
            Decoders.addDecoder(clazz: [TeamEventStatusRankRanking].self) { (source: AnyObject) -> [TeamEventStatusRankRanking] in
                return Decoders.decode(clazz: [TeamEventStatusRankRanking].self, source: source)
            }
            // Decoder for TeamEventStatusRankRanking
            Decoders.addDecoder(clazz: TeamEventStatusRankRanking.self) { (source: AnyObject) -> TeamEventStatusRankRanking in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TeamEventStatusRankRanking()
                instance.dq = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["dq"])
                instance.matchesPlayed = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["matches_played"])
                instance.qualAverage = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["qual_average"])
                instance.rank = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["rank"])
                instance.record = Decoders.decodeOptional(clazz: WLTRecord.self, source: sourceDictionary["record"])
                instance.sortOrders = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort_orders"])
                instance.teamKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["team_key"])
                return instance
            }


            // Decoder for [TeamEventStatusRankSortOrderInfo]
            Decoders.addDecoder(clazz: [TeamEventStatusRankSortOrderInfo].self) { (source: AnyObject) -> [TeamEventStatusRankSortOrderInfo] in
                return Decoders.decode(clazz: [TeamEventStatusRankSortOrderInfo].self, source: source)
            }
            // Decoder for TeamEventStatusRankSortOrderInfo
            Decoders.addDecoder(clazz: TeamEventStatusRankSortOrderInfo.self) { (source: AnyObject) -> TeamEventStatusRankSortOrderInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TeamEventStatusRankSortOrderInfo()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.precision = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["precision"])
                return instance
            }


            // Decoder for [TeamRobot]
            Decoders.addDecoder(clazz: [TeamRobot].self) { (source: AnyObject) -> [TeamRobot] in
                return Decoders.decode(clazz: [TeamRobot].self, source: source)
            }
            // Decoder for TeamRobot
            Decoders.addDecoder(clazz: TeamRobot.self) { (source: AnyObject) -> TeamRobot in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TeamRobot(year: Decoders.decode(clazz: Int32.self, source: sourceDictionary["year"]!), robotName: Decoders.decode(clazz: String.self, source: sourceDictionary["robot_name"]!), key: Decoders.decode(clazz: String.self, source: sourceDictionary["key"]!), teamKey: Decoders.decode(clazz: String.self, source: sourceDictionary["team_key"]!))
                return instance
            }


            // Decoder for [TeamSimple]
            Decoders.addDecoder(clazz: [TeamSimple].self) { (source: AnyObject) -> [TeamSimple] in
                return Decoders.decode(clazz: [TeamSimple].self, source: source)
            }
            // Decoder for TeamSimple
            Decoders.addDecoder(clazz: TeamSimple.self) { (source: AnyObject) -> TeamSimple in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TeamSimple(key: Decoders.decode(clazz: String.self, source: sourceDictionary["key"]!), teamNumber: Decoders.decode(clazz: Int32.self, source: sourceDictionary["team_number"]!), name: Decoders.decode(clazz: String.self, source: sourceDictionary["name"]!))
                instance.nickname = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nickname"])
                instance.city = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["city"])
                instance.stateProv = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["state_prov"])
                instance.country = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country"])
                return instance
            }


            // Decoder for [WLTRecord]
            Decoders.addDecoder(clazz: [WLTRecord].self) { (source: AnyObject) -> [WLTRecord] in
                return Decoders.decode(clazz: [WLTRecord].self, source: source)
            }
            // Decoder for WLTRecord
            Decoders.addDecoder(clazz: WLTRecord.self) { (source: AnyObject) -> WLTRecord in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = WLTRecord(losses: Decoders.decode(clazz: Int32.self, source: sourceDictionary["losses"]!), wins: Decoders.decode(clazz: Int32.self, source: sourceDictionary["wins"]!), ties: Decoders.decode(clazz: Int32.self, source: sourceDictionary["ties"]!))
                return instance
            }


            // Decoder for [Webcast]
            Decoders.addDecoder(clazz: [Webcast].self) { (source: AnyObject) -> [Webcast] in
                return Decoders.decode(clazz: [Webcast].self, source: source)
            }
            // Decoder for Webcast
            Decoders.addDecoder(clazz: Webcast.self) { (source: AnyObject) -> Webcast in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Webcast(type: Webcast.ModelType(rawValue: (sourceDictionary["type"] as? String) ?? "")! , channel: Decoders.decode(clazz: String.self, source: sourceDictionary["channel"]!))
                instance.file = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["file"])
                return instance
            }
        }
    }
}
