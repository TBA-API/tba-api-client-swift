//
// EventAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Alamofire

extension TBAAPIv3KitAPI {


open class EventAPI {
    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDistrictEvents(completion: @escaping ((_ data: [Event]?,_ error: Error?) -> Void)) {
        getDistrictEventsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /district/{district_key}/events
     - Gets a list of events in the given district.
     - API Key:
       - type: apiKey X-TBA-Auth-Key 
       - name: apiKey
     - responseHeaders: [Cache-Control(String), Last-Modified(String)]
     - returns: RequestBuilder<[Event]> 
     */
    open class func getDistrictEventsWithRequestBuilder() -> RequestBuilder<[Event]> {
        let path = "/district/{district_key}/events"
        let URLString = TBAAPIv3KitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Event]>.Type = TBAAPIv3KitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDistrictEventsKeys(completion: @escaping ((_ data: [String]?,_ error: Error?) -> Void)) {
        getDistrictEventsKeysWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /district/{district_key}/events/keys
     - Gets a list of event keys for events in the given district.
     - API Key:
       - type: apiKey X-TBA-Auth-Key 
       - name: apiKey
     - responseHeaders: [Cache-Control(String), Last-Modified(String)]
     - returns: RequestBuilder<[String]> 
     */
    open class func getDistrictEventsKeysWithRequestBuilder() -> RequestBuilder<[String]> {
        let path = "/district/{district_key}/events/keys"
        let URLString = TBAAPIv3KitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[String]>.Type = TBAAPIv3KitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter districtKey: (path) TBA District Key, eg &#x60;2016fim&#x60; 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDistrictEventsSimple(districtKey: String, completion: @escaping ((_ data: [EventSimple]?,_ error: Error?) -> Void)) {
        getDistrictEventsSimpleWithRequestBuilder(districtKey: districtKey).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /district/{district_key}/events/simple
     - Gets a short-form list of events in the given district.
     - API Key:
       - type: apiKey X-TBA-Auth-Key 
       - name: apiKey
     - responseHeaders: [Cache-Control(String), Last-Modified(String)]
     - parameter districtKey: (path) TBA District Key, eg &#x60;2016fim&#x60; 
     - returns: RequestBuilder<[EventSimple]> 
     */
    open class func getDistrictEventsSimpleWithRequestBuilder(districtKey: String) -> RequestBuilder<[EventSimple]> {
        var path = "/district/{district_key}/events/simple"
        let districtKeyPreEscape = "\(APIHelper.mapValueToPathItem(districtKey))"
        let districtKeyPostEscape = districtKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{district_key}", with: districtKeyPostEscape, options: .literal, range: nil)
        let URLString = TBAAPIv3KitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[EventSimple]>.Type = TBAAPIv3KitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEvent(completion: @escaping ((_ data: Event?,_ error: Error?) -> Void)) {
        getEventWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /event/{event_key}
     - Gets an Event.
     - API Key:
       - type: apiKey X-TBA-Auth-Key 
       - name: apiKey
     - responseHeaders: [Cache-Control(String), Last-Modified(String)]
     - returns: RequestBuilder<Event> 
     */
    open class func getEventWithRequestBuilder() -> RequestBuilder<Event> {
        let path = "/event/{event_key}"
        let URLString = TBAAPIv3KitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Event>.Type = TBAAPIv3KitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEventAlliances(completion: @escaping ((_ data: [EliminationAlliance]?,_ error: Error?) -> Void)) {
        getEventAlliancesWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /event/{event_key}/alliances
     - Gets a list of Elimination Alliances for the given Event.
     - API Key:
       - type: apiKey X-TBA-Auth-Key 
       - name: apiKey
     - responseHeaders: [Cache-Control(String), Last-Modified(String)]
     - returns: RequestBuilder<[EliminationAlliance]> 
     */
    open class func getEventAlliancesWithRequestBuilder() -> RequestBuilder<[EliminationAlliance]> {
        let path = "/event/{event_key}/alliances"
        let URLString = TBAAPIv3KitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[EliminationAlliance]>.Type = TBAAPIv3KitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEventAwards(completion: @escaping ((_ data: [Award]?,_ error: Error?) -> Void)) {
        getEventAwardsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /event/{event_key}/awards
     - Gets a list of awards from the given event.
     - API Key:
       - type: apiKey X-TBA-Auth-Key 
       - name: apiKey
     - responseHeaders: [Cache-Control(String), Last-Modified(String)]
     - returns: RequestBuilder<[Award]> 
     */
    open class func getEventAwardsWithRequestBuilder() -> RequestBuilder<[Award]> {
        let path = "/event/{event_key}/awards"
        let URLString = TBAAPIv3KitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Award]>.Type = TBAAPIv3KitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEventDistrictPoints(completion: @escaping ((_ data: EventDistrictPoints?,_ error: Error?) -> Void)) {
        getEventDistrictPointsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /event/{event_key}/district_points
     - Gets a list of team rankings for the Event.
     - API Key:
       - type: apiKey X-TBA-Auth-Key 
       - name: apiKey
     - responseHeaders: [Cache-Control(String), Last-Modified(String)]
     - returns: RequestBuilder<EventDistrictPoints> 
     */
    open class func getEventDistrictPointsWithRequestBuilder() -> RequestBuilder<EventDistrictPoints> {
        let path = "/event/{event_key}/district_points"
        let URLString = TBAAPIv3KitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EventDistrictPoints>.Type = TBAAPIv3KitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEventInsights(completion: @escaping ((_ data: EventInsights?,_ error: Error?) -> Void)) {
        getEventInsightsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /event/{event_key}/insights
     - Gets a set of Event-specific insights for the given Event.
     - API Key:
       - type: apiKey X-TBA-Auth-Key 
       - name: apiKey
     - responseHeaders: [Cache-Control(String), Last-Modified(String)]
     - returns: RequestBuilder<EventInsights> 
     */
    open class func getEventInsightsWithRequestBuilder() -> RequestBuilder<EventInsights> {
        let path = "/event/{event_key}/insights"
        let URLString = TBAAPIv3KitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EventInsights>.Type = TBAAPIv3KitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEventMatchTimeseries(completion: @escaping ((_ data: [String]?,_ error: Error?) -> Void)) {
        getEventMatchTimeseriesWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /event/{event_key}/matches/timeseries
     - Gets an array of Match Keys for the given event key that have timeseries data. Returns an empty array if no matches have timeseries data. *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up. *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.
     - API Key:
       - type: apiKey X-TBA-Auth-Key 
       - name: apiKey
     - responseHeaders: [Cache-Control(String), Last-Modified(String)]
     - returns: RequestBuilder<[String]> 
     */
    open class func getEventMatchTimeseriesWithRequestBuilder() -> RequestBuilder<[String]> {
        let path = "/event/{event_key}/matches/timeseries"
        let URLString = TBAAPIv3KitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[String]>.Type = TBAAPIv3KitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEventMatches(completion: @escaping ((_ data: [Match]?,_ error: Error?) -> Void)) {
        getEventMatchesWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /event/{event_key}/matches
     - Gets a list of matches for the given event.
     - API Key:
       - type: apiKey X-TBA-Auth-Key 
       - name: apiKey
     - responseHeaders: [Cache-Control(String), Last-Modified(String)]
     - returns: RequestBuilder<[Match]> 
     */
    open class func getEventMatchesWithRequestBuilder() -> RequestBuilder<[Match]> {
        let path = "/event/{event_key}/matches"
        let URLString = TBAAPIv3KitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Match]>.Type = TBAAPIv3KitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEventMatchesKeys(completion: @escaping ((_ data: [String]?,_ error: Error?) -> Void)) {
        getEventMatchesKeysWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /event/{event_key}/matches/keys
     - Gets a list of match keys for the given event.
     - API Key:
       - type: apiKey X-TBA-Auth-Key 
       - name: apiKey
     - responseHeaders: [Cache-Control(String), Last-Modified(String)]
     - returns: RequestBuilder<[String]> 
     */
    open class func getEventMatchesKeysWithRequestBuilder() -> RequestBuilder<[String]> {
        let path = "/event/{event_key}/matches/keys"
        let URLString = TBAAPIv3KitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[String]>.Type = TBAAPIv3KitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEventMatchesSimple(completion: @escaping ((_ data: [MatchSimple]?,_ error: Error?) -> Void)) {
        getEventMatchesSimpleWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /event/{event_key}/matches/simple
     - Gets a short-form list of matches for the given event.
     - API Key:
       - type: apiKey X-TBA-Auth-Key 
       - name: apiKey
     - responseHeaders: [Cache-Control(String), Last-Modified(String)]
     - returns: RequestBuilder<[MatchSimple]> 
     */
    open class func getEventMatchesSimpleWithRequestBuilder() -> RequestBuilder<[MatchSimple]> {
        let path = "/event/{event_key}/matches/simple"
        let URLString = TBAAPIv3KitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[MatchSimple]>.Type = TBAAPIv3KitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEventOPRs(completion: @escaping ((_ data: EventOPRs?,_ error: Error?) -> Void)) {
        getEventOPRsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /event/{event_key}/oprs
     - Gets a set of Event OPRs (including OPR, DPR, and CCWM) for the given Event.
     - API Key:
       - type: apiKey X-TBA-Auth-Key 
       - name: apiKey
     - responseHeaders: [Cache-Control(String), Last-Modified(String)]
     - returns: RequestBuilder<EventOPRs> 
     */
    open class func getEventOPRsWithRequestBuilder() -> RequestBuilder<EventOPRs> {
        let path = "/event/{event_key}/oprs"
        let URLString = TBAAPIv3KitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EventOPRs>.Type = TBAAPIv3KitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEventPredictions(completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        getEventPredictionsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /event/{event_key}/predictions
     - Gets information on TBA-generated predictions for the given Event. Contains year-specific information. *WARNING* This endpoint is currently under development and may change at any time.
     - API Key:
       - type: apiKey X-TBA-Auth-Key 
       - name: apiKey
     - responseHeaders: [Cache-Control(String), Last-Modified(String)]
     - returns: RequestBuilder<Any> 
     */
    open class func getEventPredictionsWithRequestBuilder() -> RequestBuilder<Any> {
        let path = "/event/{event_key}/predictions"
        let URLString = TBAAPIv3KitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = TBAAPIv3KitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEventRankings(completion: @escaping ((_ data: EventRanking?,_ error: Error?) -> Void)) {
        getEventRankingsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /event/{event_key}/rankings
     - Gets a list of team rankings for the Event.
     - API Key:
       - type: apiKey X-TBA-Auth-Key 
       - name: apiKey
     - responseHeaders: [Cache-Control(String), Last-Modified(String)]
     - returns: RequestBuilder<EventRanking> 
     */
    open class func getEventRankingsWithRequestBuilder() -> RequestBuilder<EventRanking> {
        let path = "/event/{event_key}/rankings"
        let URLString = TBAAPIv3KitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EventRanking>.Type = TBAAPIv3KitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEventSimple(completion: @escaping ((_ data: EventSimple?,_ error: Error?) -> Void)) {
        getEventSimpleWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /event/{event_key}/simple
     - Gets a short-form Event.
     - API Key:
       - type: apiKey X-TBA-Auth-Key 
       - name: apiKey
     - responseHeaders: [Cache-Control(String), Last-Modified(String)]
     - returns: RequestBuilder<EventSimple> 
     */
    open class func getEventSimpleWithRequestBuilder() -> RequestBuilder<EventSimple> {
        let path = "/event/{event_key}/simple"
        let URLString = TBAAPIv3KitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EventSimple>.Type = TBAAPIv3KitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEventTeams(completion: @escaping ((_ data: [Team]?,_ error: Error?) -> Void)) {
        getEventTeamsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /event/{event_key}/teams
     - Gets a list of `Team` objects that competed in the given event.
     - API Key:
       - type: apiKey X-TBA-Auth-Key 
       - name: apiKey
     - responseHeaders: [Cache-Control(String), Last-Modified(String)]
     - returns: RequestBuilder<[Team]> 
     */
    open class func getEventTeamsWithRequestBuilder() -> RequestBuilder<[Team]> {
        let path = "/event/{event_key}/teams"
        let URLString = TBAAPIv3KitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Team]>.Type = TBAAPIv3KitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEventTeamsKeys(completion: @escaping ((_ data: [String]?,_ error: Error?) -> Void)) {
        getEventTeamsKeysWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /event/{event_key}/teams/keys
     - Gets a list of `Team` keys that competed in the given event.
     - API Key:
       - type: apiKey X-TBA-Auth-Key 
       - name: apiKey
     - responseHeaders: [Cache-Control(String), Last-Modified(String)]
     - returns: RequestBuilder<[String]> 
     */
    open class func getEventTeamsKeysWithRequestBuilder() -> RequestBuilder<[String]> {
        let path = "/event/{event_key}/teams/keys"
        let URLString = TBAAPIv3KitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[String]>.Type = TBAAPIv3KitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEventTeamsSimple(completion: @escaping ((_ data: [TeamSimple]?,_ error: Error?) -> Void)) {
        getEventTeamsSimpleWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /event/{event_key}/teams/simple
     - Gets a short-form list of `Team` objects that competed in the given event.
     - API Key:
       - type: apiKey X-TBA-Auth-Key 
       - name: apiKey
     - responseHeaders: [Cache-Control(String), Last-Modified(String)]
     - returns: RequestBuilder<[TeamSimple]> 
     */
    open class func getEventTeamsSimpleWithRequestBuilder() -> RequestBuilder<[TeamSimple]> {
        let path = "/event/{event_key}/teams/simple"
        let URLString = TBAAPIv3KitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[TeamSimple]>.Type = TBAAPIv3KitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEventTeamsStatuses(completion: @escaping ((_ data: [String:TeamEventStatus]?,_ error: Error?) -> Void)) {
        getEventTeamsStatusesWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /event/{event_key}/teams/statuses
     - Gets a key-value list of the event statuses for teams competing at the given event.
     - API Key:
       - type: apiKey X-TBA-Auth-Key 
       - name: apiKey
     - responseHeaders: [Cache-Control(String), Last-Modified(String)]
     - returns: RequestBuilder<[String:TeamEventStatus]> 
     */
    open class func getEventTeamsStatusesWithRequestBuilder() -> RequestBuilder<[String:TeamEventStatus]> {
        let path = "/event/{event_key}/teams/statuses"
        let URLString = TBAAPIv3KitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[String:TeamEventStatus]>.Type = TBAAPIv3KitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEventsByYear(completion: @escaping ((_ data: [Event]?,_ error: Error?) -> Void)) {
        getEventsByYearWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /events/{year}
     - Gets a list of events in the given year.
     - API Key:
       - type: apiKey X-TBA-Auth-Key 
       - name: apiKey
     - responseHeaders: [Cache-Control(String), Last-Modified(String)]
     - returns: RequestBuilder<[Event]> 
     */
    open class func getEventsByYearWithRequestBuilder() -> RequestBuilder<[Event]> {
        let path = "/events/{year}"
        let URLString = TBAAPIv3KitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Event]>.Type = TBAAPIv3KitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEventsByYearKeys(completion: @escaping ((_ data: [String]?,_ error: Error?) -> Void)) {
        getEventsByYearKeysWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /events/{year}/keys
     - Gets a list of event keys in the given year.
     - API Key:
       - type: apiKey X-TBA-Auth-Key 
       - name: apiKey
     - responseHeaders: [Cache-Control(String), Last-Modified(String)]
     - returns: RequestBuilder<[String]> 
     */
    open class func getEventsByYearKeysWithRequestBuilder() -> RequestBuilder<[String]> {
        let path = "/events/{year}/keys"
        let URLString = TBAAPIv3KitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[String]>.Type = TBAAPIv3KitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEventsByYearSimple(completion: @escaping ((_ data: [EventSimple]?,_ error: Error?) -> Void)) {
        getEventsByYearSimpleWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /events/{year}/simple
     - Gets a short-form list of events in the given year.
     - API Key:
       - type: apiKey X-TBA-Auth-Key 
       - name: apiKey
     - responseHeaders: [Cache-Control(String), Last-Modified(String)]
     - returns: RequestBuilder<[EventSimple]> 
     */
    open class func getEventsByYearSimpleWithRequestBuilder() -> RequestBuilder<[EventSimple]> {
        let path = "/events/{year}/simple"
        let URLString = TBAAPIv3KitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[EventSimple]>.Type = TBAAPIv3KitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTeamEventAwards(completion: @escaping ((_ data: [Award]?,_ error: Error?) -> Void)) {
        getTeamEventAwardsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /team/{team_key}/event/{event_key}/awards
     - Gets a list of awards the given team won at the given event.
     - API Key:
       - type: apiKey X-TBA-Auth-Key 
       - name: apiKey
     - responseHeaders: [Cache-Control(String), Last-Modified(String)]
     - returns: RequestBuilder<[Award]> 
     */
    open class func getTeamEventAwardsWithRequestBuilder() -> RequestBuilder<[Award]> {
        let path = "/team/{team_key}/event/{event_key}/awards"
        let URLString = TBAAPIv3KitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Award]>.Type = TBAAPIv3KitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTeamEventMatches(completion: @escaping ((_ data: [Match]?,_ error: Error?) -> Void)) {
        getTeamEventMatchesWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /team/{team_key}/event/{event_key}/matches
     - Gets a list of matches for the given team and event.
     - API Key:
       - type: apiKey X-TBA-Auth-Key 
       - name: apiKey
     - responseHeaders: [Cache-Control(String), Last-Modified(String)]
     - returns: RequestBuilder<[Match]> 
     */
    open class func getTeamEventMatchesWithRequestBuilder() -> RequestBuilder<[Match]> {
        let path = "/team/{team_key}/event/{event_key}/matches"
        let URLString = TBAAPIv3KitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Match]>.Type = TBAAPIv3KitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTeamEventMatchesKeys(completion: @escaping ((_ data: [String]?,_ error: Error?) -> Void)) {
        getTeamEventMatchesKeysWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /team/{team_key}/event/{event_key}/matches/keys
     - Gets a list of match keys for matches for the given team and event.
     - API Key:
       - type: apiKey X-TBA-Auth-Key 
       - name: apiKey
     - responseHeaders: [Cache-Control(String), Last-Modified(String)]
     - returns: RequestBuilder<[String]> 
     */
    open class func getTeamEventMatchesKeysWithRequestBuilder() -> RequestBuilder<[String]> {
        let path = "/team/{team_key}/event/{event_key}/matches/keys"
        let URLString = TBAAPIv3KitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[String]>.Type = TBAAPIv3KitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTeamEventMatchesSimple(completion: @escaping ((_ data: [Match]?,_ error: Error?) -> Void)) {
        getTeamEventMatchesSimpleWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /team/{team_key}/event/{event_key}/matches/simple
     - Gets a short-form list of matches for the given team and event.
     - API Key:
       - type: apiKey X-TBA-Auth-Key 
       - name: apiKey
     - responseHeaders: [Cache-Control(String), Last-Modified(String)]
     - returns: RequestBuilder<[Match]> 
     */
    open class func getTeamEventMatchesSimpleWithRequestBuilder() -> RequestBuilder<[Match]> {
        let path = "/team/{team_key}/event/{event_key}/matches/simple"
        let URLString = TBAAPIv3KitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Match]>.Type = TBAAPIv3KitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTeamEventStatus(completion: @escaping ((_ data: TeamEventStatus?,_ error: Error?) -> Void)) {
        getTeamEventStatusWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /team/{team_key}/event/{event_key}/status
     - Gets the competition rank and status of the team at the given event.
     - API Key:
       - type: apiKey X-TBA-Auth-Key 
       - name: apiKey
     - responseHeaders: [Cache-Control(String), Last-Modified(String)]
     - returns: RequestBuilder<TeamEventStatus> 
     */
    open class func getTeamEventStatusWithRequestBuilder() -> RequestBuilder<TeamEventStatus> {
        let path = "/team/{team_key}/event/{event_key}/status"
        let URLString = TBAAPIv3KitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TeamEventStatus>.Type = TBAAPIv3KitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTeamEvents(completion: @escaping ((_ data: [Event]?,_ error: Error?) -> Void)) {
        getTeamEventsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /team/{team_key}/events
     - Gets a list of all events this team has competed at.
     - API Key:
       - type: apiKey X-TBA-Auth-Key 
       - name: apiKey
     - responseHeaders: [Cache-Control(String), Last-Modified(String)]
     - returns: RequestBuilder<[Event]> 
     */
    open class func getTeamEventsWithRequestBuilder() -> RequestBuilder<[Event]> {
        let path = "/team/{team_key}/events"
        let URLString = TBAAPIv3KitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Event]>.Type = TBAAPIv3KitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTeamEventsByYear(completion: @escaping ((_ data: [Event]?,_ error: Error?) -> Void)) {
        getTeamEventsByYearWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /team/{team_key}/events/{year}
     - Gets a list of events this team has competed at in the given year.
     - API Key:
       - type: apiKey X-TBA-Auth-Key 
       - name: apiKey
     - responseHeaders: [Cache-Control(String), Last-Modified(String)]
     - returns: RequestBuilder<[Event]> 
     */
    open class func getTeamEventsByYearWithRequestBuilder() -> RequestBuilder<[Event]> {
        let path = "/team/{team_key}/events/{year}"
        let URLString = TBAAPIv3KitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Event]>.Type = TBAAPIv3KitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTeamEventsByYearKeys(completion: @escaping ((_ data: [String]?,_ error: Error?) -> Void)) {
        getTeamEventsByYearKeysWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /team/{team_key}/events/{year}/keys
     - Gets a list of the event keys for events this team has competed at in the given year.
     - API Key:
       - type: apiKey X-TBA-Auth-Key 
       - name: apiKey
     - responseHeaders: [Cache-Control(String), Last-Modified(String)]
     - returns: RequestBuilder<[String]> 
     */
    open class func getTeamEventsByYearKeysWithRequestBuilder() -> RequestBuilder<[String]> {
        let path = "/team/{team_key}/events/{year}/keys"
        let URLString = TBAAPIv3KitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[String]>.Type = TBAAPIv3KitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTeamEventsByYearSimple(completion: @escaping ((_ data: [EventSimple]?,_ error: Error?) -> Void)) {
        getTeamEventsByYearSimpleWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /team/{team_key}/events/{year}/simple
     - Gets a short-form list of events this team has competed at in the given year.
     - API Key:
       - type: apiKey X-TBA-Auth-Key 
       - name: apiKey
     - responseHeaders: [Cache-Control(String), Last-Modified(String)]
     - returns: RequestBuilder<[EventSimple]> 
     */
    open class func getTeamEventsByYearSimpleWithRequestBuilder() -> RequestBuilder<[EventSimple]> {
        let path = "/team/{team_key}/events/{year}/simple"
        let URLString = TBAAPIv3KitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[EventSimple]>.Type = TBAAPIv3KitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTeamEventsKeys(completion: @escaping ((_ data: [String]?,_ error: Error?) -> Void)) {
        getTeamEventsKeysWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /team/{team_key}/events/keys
     - Gets a list of the event keys for all events this team has competed at.
     - API Key:
       - type: apiKey X-TBA-Auth-Key 
       - name: apiKey
     - responseHeaders: [Cache-Control(String), Last-Modified(String)]
     - returns: RequestBuilder<[String]> 
     */
    open class func getTeamEventsKeysWithRequestBuilder() -> RequestBuilder<[String]> {
        let path = "/team/{team_key}/events/keys"
        let URLString = TBAAPIv3KitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[String]>.Type = TBAAPIv3KitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTeamEventsSimple(completion: @escaping ((_ data: [EventSimple]?,_ error: Error?) -> Void)) {
        getTeamEventsSimpleWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /team/{team_key}/events/simple
     - Gets a short-form list of all events this team has competed at.
     - API Key:
       - type: apiKey X-TBA-Auth-Key 
       - name: apiKey
     - responseHeaders: [Cache-Control(String), Last-Modified(String)]
     - returns: RequestBuilder<[EventSimple]> 
     */
    open class func getTeamEventsSimpleWithRequestBuilder() -> RequestBuilder<[EventSimple]> {
        let path = "/team/{team_key}/events/simple"
        let URLString = TBAAPIv3KitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[EventSimple]>.Type = TBAAPIv3KitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTeamEventsStatusesByYear(completion: @escaping ((_ data: [String:TeamEventStatus]?,_ error: Error?) -> Void)) {
        getTeamEventsStatusesByYearWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /team/{team_key}/events/{year}/statuses
     - Gets a key-value list of the event statuses for events this team has competed at in the given year.
     - API Key:
       - type: apiKey X-TBA-Auth-Key 
       - name: apiKey
     - responseHeaders: [Cache-Control(String), Last-Modified(String)]
     - returns: RequestBuilder<[String:TeamEventStatus]> 
     */
    open class func getTeamEventsStatusesByYearWithRequestBuilder() -> RequestBuilder<[String:TeamEventStatus]> {
        let path = "/team/{team_key}/events/{year}/statuses"
        let URLString = TBAAPIv3KitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[String:TeamEventStatus]>.Type = TBAAPIv3KitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
}
