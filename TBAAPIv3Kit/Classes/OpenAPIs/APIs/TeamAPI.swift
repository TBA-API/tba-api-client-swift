//
// TeamAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Alamofire

extension TBAAPIv3KitAPI {


open class TeamAPI {
    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDistrictRankings(completion: @escaping ((_ data: [DistrictRanking]?,_ error: Error?) -> Void)) {
        getDistrictRankingsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /district/{district_key}/rankings
     - Gets a list of team district rankings for the given district.
     - API Key:
       - type: apiKey X-TBA-Auth-Key 
       - name: apiKey
     - responseHeaders: [Cache-Control(String), Last-Modified(String)]
     - returns: RequestBuilder<[DistrictRanking]> 
     */
    open class func getDistrictRankingsWithRequestBuilder() -> RequestBuilder<[DistrictRanking]> {
        let path = "/district/{district_key}/rankings"
        let URLString = TBAAPIv3KitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[DistrictRanking]>.Type = TBAAPIv3KitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDistrictTeams(completion: @escaping ((_ data: [Team]?,_ error: Error?) -> Void)) {
        getDistrictTeamsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /district/{district_key}/teams
     - Gets a list of `Team` objects that competed in events in the given district.
     - API Key:
       - type: apiKey X-TBA-Auth-Key 
       - name: apiKey
     - responseHeaders: [Cache-Control(String), Last-Modified(String)]
     - returns: RequestBuilder<[Team]> 
     */
    open class func getDistrictTeamsWithRequestBuilder() -> RequestBuilder<[Team]> {
        let path = "/district/{district_key}/teams"
        let URLString = TBAAPIv3KitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Team]>.Type = TBAAPIv3KitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDistrictTeamsKeys(completion: @escaping ((_ data: [String]?,_ error: Error?) -> Void)) {
        getDistrictTeamsKeysWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /district/{district_key}/teams/keys
     - Gets a list of `Team` objects that competed in events in the given district.
     - API Key:
       - type: apiKey X-TBA-Auth-Key 
       - name: apiKey
     - responseHeaders: [Cache-Control(String), Last-Modified(String)]
     - returns: RequestBuilder<[String]> 
     */
    open class func getDistrictTeamsKeysWithRequestBuilder() -> RequestBuilder<[String]> {
        let path = "/district/{district_key}/teams/keys"
        let URLString = TBAAPIv3KitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[String]>.Type = TBAAPIv3KitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDistrictTeamsSimple(completion: @escaping ((_ data: [TeamSimple]?,_ error: Error?) -> Void)) {
        getDistrictTeamsSimpleWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /district/{district_key}/teams/simple
     - Gets a short-form list of `Team` objects that competed in events in the given district.
     - API Key:
       - type: apiKey X-TBA-Auth-Key 
       - name: apiKey
     - responseHeaders: [Cache-Control(String), Last-Modified(String)]
     - returns: RequestBuilder<[TeamSimple]> 
     */
    open class func getDistrictTeamsSimpleWithRequestBuilder() -> RequestBuilder<[TeamSimple]> {
        let path = "/district/{district_key}/teams/simple"
        let URLString = TBAAPIv3KitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[TeamSimple]>.Type = TBAAPIv3KitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEventTeams(completion: @escaping ((_ data: [Team]?,_ error: Error?) -> Void)) {
        getEventTeamsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /event/{event_key}/teams
     - Gets a list of `Team` objects that competed in the given event.
     - API Key:
       - type: apiKey X-TBA-Auth-Key 
       - name: apiKey
     - responseHeaders: [Cache-Control(String), Last-Modified(String)]
     - returns: RequestBuilder<[Team]> 
     */
    open class func getEventTeamsWithRequestBuilder() -> RequestBuilder<[Team]> {
        let path = "/event/{event_key}/teams"
        let URLString = TBAAPIv3KitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Team]>.Type = TBAAPIv3KitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEventTeamsKeys(completion: @escaping ((_ data: [String]?,_ error: Error?) -> Void)) {
        getEventTeamsKeysWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /event/{event_key}/teams/keys
     - Gets a list of `Team` keys that competed in the given event.
     - API Key:
       - type: apiKey X-TBA-Auth-Key 
       - name: apiKey
     - responseHeaders: [Cache-Control(String), Last-Modified(String)]
     - returns: RequestBuilder<[String]> 
     */
    open class func getEventTeamsKeysWithRequestBuilder() -> RequestBuilder<[String]> {
        let path = "/event/{event_key}/teams/keys"
        let URLString = TBAAPIv3KitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[String]>.Type = TBAAPIv3KitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEventTeamsSimple(completion: @escaping ((_ data: [TeamSimple]?,_ error: Error?) -> Void)) {
        getEventTeamsSimpleWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /event/{event_key}/teams/simple
     - Gets a short-form list of `Team` objects that competed in the given event.
     - API Key:
       - type: apiKey X-TBA-Auth-Key 
       - name: apiKey
     - responseHeaders: [Cache-Control(String), Last-Modified(String)]
     - returns: RequestBuilder<[TeamSimple]> 
     */
    open class func getEventTeamsSimpleWithRequestBuilder() -> RequestBuilder<[TeamSimple]> {
        let path = "/event/{event_key}/teams/simple"
        let URLString = TBAAPIv3KitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[TeamSimple]>.Type = TBAAPIv3KitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEventTeamsStatuses(completion: @escaping ((_ data: [String:TeamEventStatus]?,_ error: Error?) -> Void)) {
        getEventTeamsStatusesWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /event/{event_key}/teams/statuses
     - Gets a key-value list of the event statuses for teams competing at the given event.
     - API Key:
       - type: apiKey X-TBA-Auth-Key 
       - name: apiKey
     - responseHeaders: [Cache-Control(String), Last-Modified(String)]
     - returns: RequestBuilder<[String:TeamEventStatus]> 
     */
    open class func getEventTeamsStatusesWithRequestBuilder() -> RequestBuilder<[String:TeamEventStatus]> {
        let path = "/event/{event_key}/teams/statuses"
        let URLString = TBAAPIv3KitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[String:TeamEventStatus]>.Type = TBAAPIv3KitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTeam(completion: @escaping ((_ data: Team?,_ error: Error?) -> Void)) {
        getTeamWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /team/{team_key}
     - Gets a `Team` object for the team referenced by the given key.
     - API Key:
       - type: apiKey X-TBA-Auth-Key 
       - name: apiKey
     - responseHeaders: [Cache-Control(String), Last-Modified(String)]
     - returns: RequestBuilder<Team> 
     */
    open class func getTeamWithRequestBuilder() -> RequestBuilder<Team> {
        let path = "/team/{team_key}"
        let URLString = TBAAPIv3KitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Team>.Type = TBAAPIv3KitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTeamAwards(completion: @escaping ((_ data: [Award]?,_ error: Error?) -> Void)) {
        getTeamAwardsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /team/{team_key}/awards
     - Gets a list of awards the given team has won.
     - API Key:
       - type: apiKey X-TBA-Auth-Key 
       - name: apiKey
     - responseHeaders: [Cache-Control(String), Last-Modified(String)]
     - returns: RequestBuilder<[Award]> 
     */
    open class func getTeamAwardsWithRequestBuilder() -> RequestBuilder<[Award]> {
        let path = "/team/{team_key}/awards"
        let URLString = TBAAPIv3KitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Award]>.Type = TBAAPIv3KitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTeamAwardsByYear(completion: @escaping ((_ data: [Award]?,_ error: Error?) -> Void)) {
        getTeamAwardsByYearWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /team/{team_key}/awards/{year}
     - Gets a list of awards the given team has won in a given year.
     - API Key:
       - type: apiKey X-TBA-Auth-Key 
       - name: apiKey
     - responseHeaders: [Cache-Control(String), Last-Modified(String)]
     - returns: RequestBuilder<[Award]> 
     */
    open class func getTeamAwardsByYearWithRequestBuilder() -> RequestBuilder<[Award]> {
        let path = "/team/{team_key}/awards/{year}"
        let URLString = TBAAPIv3KitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Award]>.Type = TBAAPIv3KitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTeamDistricts(completion: @escaping ((_ data: [DistrictList]?,_ error: Error?) -> Void)) {
        getTeamDistrictsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /team/{team_key}/districts
     - Gets an array of districts representing each year the team was in a district. Will return an empty array if the team was never in a district.
     - API Key:
       - type: apiKey X-TBA-Auth-Key 
       - name: apiKey
     - responseHeaders: [Cache-Control(String), Last-Modified(String)]
     - returns: RequestBuilder<[DistrictList]> 
     */
    open class func getTeamDistrictsWithRequestBuilder() -> RequestBuilder<[DistrictList]> {
        let path = "/team/{team_key}/districts"
        let URLString = TBAAPIv3KitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[DistrictList]>.Type = TBAAPIv3KitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTeamEventAwards(completion: @escaping ((_ data: [Award]?,_ error: Error?) -> Void)) {
        getTeamEventAwardsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /team/{team_key}/event/{event_key}/awards
     - Gets a list of awards the given team won at the given event.
     - API Key:
       - type: apiKey X-TBA-Auth-Key 
       - name: apiKey
     - responseHeaders: [Cache-Control(String), Last-Modified(String)]
     - returns: RequestBuilder<[Award]> 
     */
    open class func getTeamEventAwardsWithRequestBuilder() -> RequestBuilder<[Award]> {
        let path = "/team/{team_key}/event/{event_key}/awards"
        let URLString = TBAAPIv3KitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Award]>.Type = TBAAPIv3KitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTeamEventMatches(completion: @escaping ((_ data: [Match]?,_ error: Error?) -> Void)) {
        getTeamEventMatchesWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /team/{team_key}/event/{event_key}/matches
     - Gets a list of matches for the given team and event.
     - API Key:
       - type: apiKey X-TBA-Auth-Key 
       - name: apiKey
     - responseHeaders: [Cache-Control(String), Last-Modified(String)]
     - returns: RequestBuilder<[Match]> 
     */
    open class func getTeamEventMatchesWithRequestBuilder() -> RequestBuilder<[Match]> {
        let path = "/team/{team_key}/event/{event_key}/matches"
        let URLString = TBAAPIv3KitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Match]>.Type = TBAAPIv3KitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTeamEventMatchesKeys(completion: @escaping ((_ data: [String]?,_ error: Error?) -> Void)) {
        getTeamEventMatchesKeysWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /team/{team_key}/event/{event_key}/matches/keys
     - Gets a list of match keys for matches for the given team and event.
     - API Key:
       - type: apiKey X-TBA-Auth-Key 
       - name: apiKey
     - responseHeaders: [Cache-Control(String), Last-Modified(String)]
     - returns: RequestBuilder<[String]> 
     */
    open class func getTeamEventMatchesKeysWithRequestBuilder() -> RequestBuilder<[String]> {
        let path = "/team/{team_key}/event/{event_key}/matches/keys"
        let URLString = TBAAPIv3KitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[String]>.Type = TBAAPIv3KitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTeamEventMatchesSimple(completion: @escaping ((_ data: [Match]?,_ error: Error?) -> Void)) {
        getTeamEventMatchesSimpleWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /team/{team_key}/event/{event_key}/matches/simple
     - Gets a short-form list of matches for the given team and event.
     - API Key:
       - type: apiKey X-TBA-Auth-Key 
       - name: apiKey
     - responseHeaders: [Cache-Control(String), Last-Modified(String)]
     - returns: RequestBuilder<[Match]> 
     */
    open class func getTeamEventMatchesSimpleWithRequestBuilder() -> RequestBuilder<[Match]> {
        let path = "/team/{team_key}/event/{event_key}/matches/simple"
        let URLString = TBAAPIv3KitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Match]>.Type = TBAAPIv3KitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTeamEventStatus(completion: @escaping ((_ data: TeamEventStatus?,_ error: Error?) -> Void)) {
        getTeamEventStatusWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /team/{team_key}/event/{event_key}/status
     - Gets the competition rank and status of the team at the given event.
     - API Key:
       - type: apiKey X-TBA-Auth-Key 
       - name: apiKey
     - responseHeaders: [Cache-Control(String), Last-Modified(String)]
     - returns: RequestBuilder<TeamEventStatus> 
     */
    open class func getTeamEventStatusWithRequestBuilder() -> RequestBuilder<TeamEventStatus> {
        let path = "/team/{team_key}/event/{event_key}/status"
        let URLString = TBAAPIv3KitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TeamEventStatus>.Type = TBAAPIv3KitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTeamEvents(completion: @escaping ((_ data: [Event]?,_ error: Error?) -> Void)) {
        getTeamEventsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /team/{team_key}/events
     - Gets a list of all events this team has competed at.
     - API Key:
       - type: apiKey X-TBA-Auth-Key 
       - name: apiKey
     - responseHeaders: [Cache-Control(String), Last-Modified(String)]
     - returns: RequestBuilder<[Event]> 
     */
    open class func getTeamEventsWithRequestBuilder() -> RequestBuilder<[Event]> {
        let path = "/team/{team_key}/events"
        let URLString = TBAAPIv3KitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Event]>.Type = TBAAPIv3KitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTeamEventsByYear(completion: @escaping ((_ data: [Event]?,_ error: Error?) -> Void)) {
        getTeamEventsByYearWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /team/{team_key}/events/{year}
     - Gets a list of events this team has competed at in the given year.
     - API Key:
       - type: apiKey X-TBA-Auth-Key 
       - name: apiKey
     - responseHeaders: [Cache-Control(String), Last-Modified(String)]
     - returns: RequestBuilder<[Event]> 
     */
    open class func getTeamEventsByYearWithRequestBuilder() -> RequestBuilder<[Event]> {
        let path = "/team/{team_key}/events/{year}"
        let URLString = TBAAPIv3KitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Event]>.Type = TBAAPIv3KitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTeamEventsByYearKeys(completion: @escaping ((_ data: [String]?,_ error: Error?) -> Void)) {
        getTeamEventsByYearKeysWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /team/{team_key}/events/{year}/keys
     - Gets a list of the event keys for events this team has competed at in the given year.
     - API Key:
       - type: apiKey X-TBA-Auth-Key 
       - name: apiKey
     - responseHeaders: [Cache-Control(String), Last-Modified(String)]
     - returns: RequestBuilder<[String]> 
     */
    open class func getTeamEventsByYearKeysWithRequestBuilder() -> RequestBuilder<[String]> {
        let path = "/team/{team_key}/events/{year}/keys"
        let URLString = TBAAPIv3KitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[String]>.Type = TBAAPIv3KitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTeamEventsByYearSimple(completion: @escaping ((_ data: [EventSimple]?,_ error: Error?) -> Void)) {
        getTeamEventsByYearSimpleWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /team/{team_key}/events/{year}/simple
     - Gets a short-form list of events this team has competed at in the given year.
     - API Key:
       - type: apiKey X-TBA-Auth-Key 
       - name: apiKey
     - responseHeaders: [Cache-Control(String), Last-Modified(String)]
     - returns: RequestBuilder<[EventSimple]> 
     */
    open class func getTeamEventsByYearSimpleWithRequestBuilder() -> RequestBuilder<[EventSimple]> {
        let path = "/team/{team_key}/events/{year}/simple"
        let URLString = TBAAPIv3KitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[EventSimple]>.Type = TBAAPIv3KitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTeamEventsKeys(completion: @escaping ((_ data: [String]?,_ error: Error?) -> Void)) {
        getTeamEventsKeysWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /team/{team_key}/events/keys
     - Gets a list of the event keys for all events this team has competed at.
     - API Key:
       - type: apiKey X-TBA-Auth-Key 
       - name: apiKey
     - responseHeaders: [Cache-Control(String), Last-Modified(String)]
     - returns: RequestBuilder<[String]> 
     */
    open class func getTeamEventsKeysWithRequestBuilder() -> RequestBuilder<[String]> {
        let path = "/team/{team_key}/events/keys"
        let URLString = TBAAPIv3KitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[String]>.Type = TBAAPIv3KitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTeamEventsSimple(completion: @escaping ((_ data: [EventSimple]?,_ error: Error?) -> Void)) {
        getTeamEventsSimpleWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /team/{team_key}/events/simple
     - Gets a short-form list of all events this team has competed at.
     - API Key:
       - type: apiKey X-TBA-Auth-Key 
       - name: apiKey
     - responseHeaders: [Cache-Control(String), Last-Modified(String)]
     - returns: RequestBuilder<[EventSimple]> 
     */
    open class func getTeamEventsSimpleWithRequestBuilder() -> RequestBuilder<[EventSimple]> {
        let path = "/team/{team_key}/events/simple"
        let URLString = TBAAPIv3KitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[EventSimple]>.Type = TBAAPIv3KitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTeamEventsStatusesByYear(completion: @escaping ((_ data: [String:TeamEventStatus]?,_ error: Error?) -> Void)) {
        getTeamEventsStatusesByYearWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /team/{team_key}/events/{year}/statuses
     - Gets a key-value list of the event statuses for events this team has competed at in the given year.
     - API Key:
       - type: apiKey X-TBA-Auth-Key 
       - name: apiKey
     - responseHeaders: [Cache-Control(String), Last-Modified(String)]
     - returns: RequestBuilder<[String:TeamEventStatus]> 
     */
    open class func getTeamEventsStatusesByYearWithRequestBuilder() -> RequestBuilder<[String:TeamEventStatus]> {
        let path = "/team/{team_key}/events/{year}/statuses"
        let URLString = TBAAPIv3KitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[String:TeamEventStatus]>.Type = TBAAPIv3KitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTeamMatchesByYear(completion: @escaping ((_ data: [Match]?,_ error: Error?) -> Void)) {
        getTeamMatchesByYearWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /team/{team_key}/matches/{year}
     - Gets a list of matches for the given team and year.
     - API Key:
       - type: apiKey X-TBA-Auth-Key 
       - name: apiKey
     - responseHeaders: [Cache-Control(String), Last-Modified(String)]
     - returns: RequestBuilder<[Match]> 
     */
    open class func getTeamMatchesByYearWithRequestBuilder() -> RequestBuilder<[Match]> {
        let path = "/team/{team_key}/matches/{year}"
        let URLString = TBAAPIv3KitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Match]>.Type = TBAAPIv3KitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTeamMatchesByYearKeys(completion: @escaping ((_ data: [String]?,_ error: Error?) -> Void)) {
        getTeamMatchesByYearKeysWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /team/{team_key}/matches/{year}/keys
     - Gets a list of match keys for matches for the given team and year.
     - API Key:
       - type: apiKey X-TBA-Auth-Key 
       - name: apiKey
     - responseHeaders: [Cache-Control(String), Last-Modified(String)]
     - returns: RequestBuilder<[String]> 
     */
    open class func getTeamMatchesByYearKeysWithRequestBuilder() -> RequestBuilder<[String]> {
        let path = "/team/{team_key}/matches/{year}/keys"
        let URLString = TBAAPIv3KitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[String]>.Type = TBAAPIv3KitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTeamMatchesByYearSimple(completion: @escaping ((_ data: [MatchSimple]?,_ error: Error?) -> Void)) {
        getTeamMatchesByYearSimpleWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /team/{team_key}/matches/{year}/simple
     - Gets a short-form list of matches for the given team and year.
     - API Key:
       - type: apiKey X-TBA-Auth-Key 
       - name: apiKey
     - responseHeaders: [Cache-Control(String), Last-Modified(String)]
     - returns: RequestBuilder<[MatchSimple]> 
     */
    open class func getTeamMatchesByYearSimpleWithRequestBuilder() -> RequestBuilder<[MatchSimple]> {
        let path = "/team/{team_key}/matches/{year}/simple"
        let URLString = TBAAPIv3KitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[MatchSimple]>.Type = TBAAPIv3KitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTeamMediaByTag(completion: @escaping ((_ data: [Media]?,_ error: Error?) -> Void)) {
        getTeamMediaByTagWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /team/{team_key}/media/tag/{media_tag}
     - Gets a list of Media (videos / pictures) for the given team and tag.
     - API Key:
       - type: apiKey X-TBA-Auth-Key 
       - name: apiKey
     - responseHeaders: [Cache-Control(String), Last-Modified(String)]
     - returns: RequestBuilder<[Media]> 
     */
    open class func getTeamMediaByTagWithRequestBuilder() -> RequestBuilder<[Media]> {
        let path = "/team/{team_key}/media/tag/{media_tag}"
        let URLString = TBAAPIv3KitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Media]>.Type = TBAAPIv3KitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTeamMediaByTagYear(completion: @escaping ((_ data: [Media]?,_ error: Error?) -> Void)) {
        getTeamMediaByTagYearWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /team/{team_key}/media/tag/{media_tag}/{year}
     - Gets a list of Media (videos / pictures) for the given team, tag and year.
     - API Key:
       - type: apiKey X-TBA-Auth-Key 
       - name: apiKey
     - responseHeaders: [Cache-Control(String), Last-Modified(String)]
     - returns: RequestBuilder<[Media]> 
     */
    open class func getTeamMediaByTagYearWithRequestBuilder() -> RequestBuilder<[Media]> {
        let path = "/team/{team_key}/media/tag/{media_tag}/{year}"
        let URLString = TBAAPIv3KitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Media]>.Type = TBAAPIv3KitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTeamMediaByYear(completion: @escaping ((_ data: [Media]?,_ error: Error?) -> Void)) {
        getTeamMediaByYearWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /team/{team_key}/media/{year}
     - Gets a list of Media (videos / pictures) for the given team and year.
     - API Key:
       - type: apiKey X-TBA-Auth-Key 
       - name: apiKey
     - responseHeaders: [Cache-Control(String), Last-Modified(String)]
     - returns: RequestBuilder<[Media]> 
     */
    open class func getTeamMediaByYearWithRequestBuilder() -> RequestBuilder<[Media]> {
        let path = "/team/{team_key}/media/{year}"
        let URLString = TBAAPIv3KitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Media]>.Type = TBAAPIv3KitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTeamRobots(completion: @escaping ((_ data: [TeamRobot]?,_ error: Error?) -> Void)) {
        getTeamRobotsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /team/{team_key}/robots
     - Gets a list of year and robot name pairs for each year that a robot name was provided. Will return an empty array if the team has never named a robot.
     - API Key:
       - type: apiKey X-TBA-Auth-Key 
       - name: apiKey
     - responseHeaders: [Cache-Control(String), Last-Modified(String)]
     - returns: RequestBuilder<[TeamRobot]> 
     */
    open class func getTeamRobotsWithRequestBuilder() -> RequestBuilder<[TeamRobot]> {
        let path = "/team/{team_key}/robots"
        let URLString = TBAAPIv3KitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[TeamRobot]>.Type = TBAAPIv3KitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTeamSimple(completion: @escaping ((_ data: TeamSimple?,_ error: Error?) -> Void)) {
        getTeamSimpleWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /team/{team_key}/simple
     - Gets a `Team_Simple` object for the team referenced by the given key.
     - API Key:
       - type: apiKey X-TBA-Auth-Key 
       - name: apiKey
     - responseHeaders: [Cache-Control(String), Last-Modified(String)]
     - returns: RequestBuilder<TeamSimple> 
     */
    open class func getTeamSimpleWithRequestBuilder() -> RequestBuilder<TeamSimple> {
        let path = "/team/{team_key}/simple"
        let URLString = TBAAPIv3KitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TeamSimple>.Type = TBAAPIv3KitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTeamSocialMedia(completion: @escaping ((_ data: [Media]?,_ error: Error?) -> Void)) {
        getTeamSocialMediaWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /team/{team_key}/social_media
     - Gets a list of Media (social media) for the given team.
     - API Key:
       - type: apiKey X-TBA-Auth-Key 
       - name: apiKey
     - responseHeaders: [Cache-Control(String), Last-Modified(String)]
     - returns: RequestBuilder<[Media]> 
     */
    open class func getTeamSocialMediaWithRequestBuilder() -> RequestBuilder<[Media]> {
        let path = "/team/{team_key}/social_media"
        let URLString = TBAAPIv3KitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Media]>.Type = TBAAPIv3KitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTeamYearsParticipated(completion: @escaping ((_ data: [Int]?,_ error: Error?) -> Void)) {
        getTeamYearsParticipatedWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /team/{team_key}/years_participated
     - Gets a list of years in which the team participated in at least one competition.
     - API Key:
       - type: apiKey X-TBA-Auth-Key 
       - name: apiKey
     - responseHeaders: [Cache-Control(String), Last-Modified(String)]
     - returns: RequestBuilder<[Int]> 
     */
    open class func getTeamYearsParticipatedWithRequestBuilder() -> RequestBuilder<[Int]> {
        let path = "/team/{team_key}/years_participated"
        let URLString = TBAAPIv3KitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Int]>.Type = TBAAPIv3KitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTeams(completion: @escaping ((_ data: [Team]?,_ error: Error?) -> Void)) {
        getTeamsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /teams/{page_num}
     - Gets a list of `Team` objects, paginated in groups of 500.
     - API Key:
       - type: apiKey X-TBA-Auth-Key 
       - name: apiKey
     - responseHeaders: [Cache-Control(String), Last-Modified(String)]
     - returns: RequestBuilder<[Team]> 
     */
    open class func getTeamsWithRequestBuilder() -> RequestBuilder<[Team]> {
        let path = "/teams/{page_num}"
        let URLString = TBAAPIv3KitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Team]>.Type = TBAAPIv3KitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTeamsByYear(completion: @escaping ((_ data: [Team]?,_ error: Error?) -> Void)) {
        getTeamsByYearWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /teams/{year}/{page_num}
     - Gets a list of `Team` objects that competed in the given year, paginated in groups of 500.
     - API Key:
       - type: apiKey X-TBA-Auth-Key 
       - name: apiKey
     - responseHeaders: [Cache-Control(String), Last-Modified(String)]
     - returns: RequestBuilder<[Team]> 
     */
    open class func getTeamsByYearWithRequestBuilder() -> RequestBuilder<[Team]> {
        let path = "/teams/{year}/{page_num}"
        let URLString = TBAAPIv3KitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Team]>.Type = TBAAPIv3KitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTeamsByYearKeys(completion: @escaping ((_ data: [String]?,_ error: Error?) -> Void)) {
        getTeamsByYearKeysWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /teams/{year}/{page_num}/keys
     - Gets a list Team Keys that competed in the given year, paginated in groups of 500.
     - API Key:
       - type: apiKey X-TBA-Auth-Key 
       - name: apiKey
     - responseHeaders: [Cache-Control(String), Last-Modified(String)]
     - returns: RequestBuilder<[String]> 
     */
    open class func getTeamsByYearKeysWithRequestBuilder() -> RequestBuilder<[String]> {
        let path = "/teams/{year}/{page_num}/keys"
        let URLString = TBAAPIv3KitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[String]>.Type = TBAAPIv3KitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTeamsByYearSimple(completion: @escaping ((_ data: [TeamSimple]?,_ error: Error?) -> Void)) {
        getTeamsByYearSimpleWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /teams/{year}/{page_num}/simple
     - Gets a list of short form `Team_Simple` objects that competed in the given year, paginated in groups of 500.
     - API Key:
       - type: apiKey X-TBA-Auth-Key 
       - name: apiKey
     - responseHeaders: [Cache-Control(String), Last-Modified(String)]
     - returns: RequestBuilder<[TeamSimple]> 
     */
    open class func getTeamsByYearSimpleWithRequestBuilder() -> RequestBuilder<[TeamSimple]> {
        let path = "/teams/{year}/{page_num}/simple"
        let URLString = TBAAPIv3KitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[TeamSimple]>.Type = TBAAPIv3KitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTeamsKeys(completion: @escaping ((_ data: [String]?,_ error: Error?) -> Void)) {
        getTeamsKeysWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /teams/{page_num}/keys
     - Gets a list of Team keys, paginated in groups of 500. (Note, each page will not have 500 teams, but will include the teams within that range of 500.)
     - API Key:
       - type: apiKey X-TBA-Auth-Key 
       - name: apiKey
     - responseHeaders: [Cache-Control(String), Last-Modified(String)]
     - returns: RequestBuilder<[String]> 
     */
    open class func getTeamsKeysWithRequestBuilder() -> RequestBuilder<[String]> {
        let path = "/teams/{page_num}/keys"
        let URLString = TBAAPIv3KitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[String]>.Type = TBAAPIv3KitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTeamsSimple(completion: @escaping ((_ data: [TeamSimple]?,_ error: Error?) -> Void)) {
        getTeamsSimpleWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /teams/{page_num}/simple
     - Gets a list of short form `Team_Simple` objects, paginated in groups of 500.
     - API Key:
       - type: apiKey X-TBA-Auth-Key 
       - name: apiKey
     - responseHeaders: [Cache-Control(String), Last-Modified(String)]
     - returns: RequestBuilder<[TeamSimple]> 
     */
    open class func getTeamsSimpleWithRequestBuilder() -> RequestBuilder<[TeamSimple]> {
        let path = "/teams/{page_num}/simple"
        let URLString = TBAAPIv3KitAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[TeamSimple]>.Type = TBAAPIv3KitAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
}
